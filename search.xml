<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Python】装饰器</title>
      <link href="/2021/12/24/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2021/12/24/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;This is an extra function&#x27;</span>)</span><br><span class="line">        func(*args,**kws)</span><br><span class="line">    <span class="keyword">return</span> wrapper()</span><br></pre></td></tr></table></figure><p>栗子：将f1函数不改变函数体条件下增加打印当前调用时间功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span>    <span class="comment"># 传入原函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(time.time())  <span class="comment"># 增加的新功能</span></span><br><span class="line">        func()      <span class="comment"># 确保函数的原功能的进行</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 返回内部函数（闭包）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator    </span><span class="comment"># @语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><pre><code>1581497430.8031123This is a function</code></pre><p>如果不用装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_func</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(time.time()) </span><br><span class="line">    func()      </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line">new_func(f1)</span><br></pre></td></tr></table></figure><p>无法看出新功能的添加，而是通过新函数调用原函数<br>将新函数打包进入装饰函数，通过装饰函数传入原函数，返回打包的新功能函数，形成闭包。进而可使用@语法糖</p><h1 id="优化：支持不同个数参数"><a href="#优化：支持不同个数参数" class="headerlink" title="优化：支持不同个数参数"></a>优化：支持不同个数参数</h1><ul><li>在内部打包函数中传入可变参数</li><li>在打包函数中老函数的调用中传入可变参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span>   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args</span>):</span>  <span class="comment"># *可变参数（args代表一组参数）</span></span><br><span class="line">        <span class="built_in">print</span>(time.time())  </span><br><span class="line">        func(*args)      <span class="comment"># 添加可变参数</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  </span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator    </span><span class="comment"># @语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">func_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span>+func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">func_name1,func_name2</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is another funcion &#x27;</span>+func_name1+<span class="string">&#x27;&#x27;</span> +func_name2)</span><br><span class="line">f1(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line">f2(<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>1581498420.7538562This is a function test11581498420.7538562This is another funcion test2 test3</code></pre><h1 id="优化：支持关键字参数"><a href="#优化：支持关键字参数" class="headerlink" title="优化：支持关键字参数"></a>优化：支持关键字参数</h1><ul><li>内部打包函数传入“**关键字参数”</li><li>调用老函数时，传入“**关键字参数”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span>   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args</span>):</span>  <span class="comment"># 添加关键字参数</span></span><br><span class="line">        <span class="built_in">print</span>(time.time())  </span><br><span class="line">        func(*args)      <span class="comment"># 添加关键字</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  </span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator    </span><span class="comment"># @语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">func_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span>+func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">func_name1,func_name2</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is another funcion &#x27;</span>+func_name1+<span class="string">&#x27;&#x27;</span> +func_name2)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">**kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kw)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line">f2(<span class="string">&#x27;test2&#x27;</span>,<span class="string">&#x27;test3&#x27;</span>)</span><br><span class="line">f3(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>1581499561.933681This is a function test11581499561.933681This is another funcion test2test31581499561.933681&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre><p><strong>关键字参数：</strong></p><ul><li>关键字参数允许你传入0个或任意多个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict</li><li>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数，以扩展函数的功能</li><li>至于到底传入了哪些关键字参数，就需要在函数内部通过kw检查</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">**kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kw)</span><br><span class="line">fun(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code></pre><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>不去改动函数内部代码的实现，改变函数的行为<br>满足开闭原则<br>满足函数复用性</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】类——面向对象</title>
      <link href="/2021/12/24/%E7%B1%BB%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/12/24/%E7%B1%BB%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python类"><a href="#Python类" class="headerlink" title="Python类"></a>Python类</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> ():</span></span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">0</span>   <span class="comment"># 类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#实例方法：行为与特征</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span>  <span class="comment"># 构造函数（特殊实例方法：初始化）</span></span><br><span class="line">        self.name=n    <span class="comment"># 实例变量</span></span><br><span class="line">        self.age=a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>刻画特征</p><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>为所有实例共享</p><pre><code>类名.变量名         # 调用类变量</code></pre><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>为每个实例所独有：保存对象特征值</p><pre><code>对象名.变量名       # 调用实例变量</code></pre><p>请看下面的栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> ():</span></span><br><span class="line">    name=<span class="string">&quot;zhangsan&quot;</span>    <span class="comment"># 在类函数之外定义的变量</span></span><br><span class="line">    age=<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span> </span><br><span class="line">        self.name=n    <span class="comment"># self.变量名 定义实例变量</span></span><br><span class="line">        self.age=a</span><br><span class="line">stu1=Student(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)</span><br><span class="line">stu2=Student(<span class="string">&quot;liufang&quot;</span>,<span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1.name)  <span class="comment"># 打印对象下的实例变量</span></span><br><span class="line"><span class="built_in">print</span>(stu2.name)  <span class="comment"># 打印对象下的实例变量</span></span><br><span class="line"><span class="built_in">print</span>(Student.name)  <span class="comment"># 打印类下的类变量</span></span><br></pre></td></tr></table></figure><pre><code>listliufangzhangsan</code></pre><p><strong>注</strong></p><p>在Student类中定义“名字”，“年龄”两个变量没有错误但没有意义</p><p>因为类是抽象的客观，而类变量中的“名字”，“年龄”应该是具体的，所以应该是属于具体对象中的，因此应该在实例变量中定义“名字”“年龄”，使它们与对象关联起来。</p><p><strong>类变量意义所在↓</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> ():</span></span><br><span class="line">    total=<span class="number">0</span>  <span class="comment"># 一个班级里所有学生的总数(和类相关的变量)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">        self.name=n</span><br><span class="line">        self.age=a</span><br><span class="line">        Student.total+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)</span><br><span class="line">stu2=Student(<span class="string">&quot;liufang&quot;</span>,<span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(Student.total)</span><br></pre></td></tr></table></figure><pre><code>2          # 通过构造函数的调用次数累加类变量total（不会根据不同对象而初始化改变），反映输入学生个数的总数</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>描述行为，通常对变量进行运算和逻辑上的一些操作</p><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p><strong><font size=3>一、定义与调用：</font></strong></p><ul><li>定义实例方法时，需要传入self参数</li><li>调用实例方法时，不需要传入self参数</li></ul><p><strong><font size=3>二、变量访问：</font></strong></p><ul><li><p><em>访问类变量：</em></p><ol><li><p>不能直接使用类变量名</p></li><li><p>两种访问方式</p><pre><code> 类名.变量名 self.__class__.变量名   # __class__关键字指当前类</code></pre></li></ol></li><li><p><em>访问实例变量</em></p><pre><code>self.变量名   # 实例方法中只能通过self.变量名调用实例变量，读取操作实例变量</code></pre><p><strong>误区：</strong>不能只通过访问self后面的变量名来访问</p><p>举个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> ():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">        self.name=n</span><br><span class="line">        self.age=a</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">        <span class="built_in">print</span>(self.__dict__)</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">stu1=Student(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><pre><code>lisi                             #执行第一个print函数&#123;&#39;name&#39;: &#39;lisi&#39;, &#39;age&#39;: 20&#125;      #执行第二个print函数，显示变量的字典，存在name变量名**报错**                         #但执行第三个print通过使用name变量名仍然会报错</code></pre></li></ul><p><strong>self“关键字”:</strong></p><ul><li>python中强制显示（显胜于隐），形如C++中的this指针</li><li>可以改成任意内容（推荐self）</li><li>self参数就代表了<strong>当前调用某个方法的对象</strong></li><li>只和对象有关，与类无关（代表实例，不代表类）</li></ul><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>专门操作类变量的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus_sum</span>(<span class="params">cls</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p> <strong><font size=3>一、定义与调用：</font></strong></p><ul><li><p><em>定义类方法：</em></p><ul><li>@classmethod:装饰器</li><li>关键字参数推荐为cls（class简写）：代表当前类的参数</li></ul></li><li><p><em>调用类方法：</em></p><pre><code>类名.类方法         # 推荐对象名.类方法       # 不推荐</code></pre></li></ul><p> <strong><font size=3>二、变量访问：</font></strong></p><ul><li><p><em>访问类变量</em></p><pre><code>      cls.类变量名  </code></pre></li><li><p><em>不能访问实例变量</em></p></li></ul><p><strong><font size=3>三、一个栗子：</font></strong></p><p>将前面实现学生总数统计（类变量的意义）的代码放到类方法中操作↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> ():</span></span><br><span class="line">    total=<span class="number">0</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">       self.name=n</span><br><span class="line">       self.age=a</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plus_sum</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.total+=<span class="number">1</span>  <span class="comment">#类方法中调用类变量： cls.类变量名</span></span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)</span><br><span class="line">Student.plus_sum()    <span class="comment"># 调用类方法: 类名.类方法（推荐）</span></span><br><span class="line">stu2=Student(<span class="string">&quot;liufang&quot;</span>,<span class="number">21</span>)</span><br><span class="line">stu1.plus_sum()       <span class="comment"># 调用类方法：对象名.类方法（不推荐）</span></span><br><span class="line"><span class="built_in">print</span>(Student.total)</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>定义与调用：<ul><li>无需传递指定的参数</li><li>对象和类都可调用静态方法</li></ul></li><li>变量访问：<ul><li>静态方法内部可以访问类变量</li><li>不能访问实例变量</li></ul></li></ul><h2 id="成员可见性"><a href="#成员可见性" class="headerlink" title="成员可见性"></a>成员可见性</h2><h3 id="设置私有数据"><a href="#设置私有数据" class="headerlink" title="设置私有数据"></a>设置私有数据</h3><p><strong>编程提倡规范：对于对类内数据成员的更改赋值，应调用相应的赋值方法，而不是类外直接访问赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> ():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">       self.name=n</span><br><span class="line">       self.age=a</span><br><span class="line">       self.score=<span class="number">0</span>     <span class="comment"># 初始状态</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">marking</span>(<span class="params">self,s</span>):</span>   <span class="comment"># 打分的函数</span></span><br><span class="line">        <span class="keyword">if</span> self.score&lt;<span class="number">0</span>:   <span class="comment">#在函数中可以对输入的分数有限制</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;分数不能小于0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.score=s</span><br><span class="line">stu1=Student(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>)</span><br><span class="line">stu1.marking(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># stu1.score=-1 不提倡直接访问赋值</span></span><br><span class="line"><span class="built_in">print</span>(stu1.score)</span><br></pre></td></tr></table></figure><pre><code>100</code></pre><p>阻止别人在类外赋值：</p><p><strong>python变量私有化：双下划线+变量名/方法名</strong></p><pre><code>__变量名__方法名</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">        self.__name=n</span><br><span class="line">        self.__age=a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__printer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.__name)</span><br><span class="line">stu1=Student(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1.__name)</span><br><span class="line">stu1.__printer()</span><br></pre></td></tr></table></figure><pre><code>**报错**    # 因为无法访问方法和实例变量</code></pre><p><strong>注</strong></p><p><em>双下划线+init+双下划线</em>构造函数可以类外访问，因为当存在 <em>双下划线+变量/方法名+双下划线</em> 结构时，python认为可以访问</p><h3 id="类外强制访问私有数据"><a href="#类外强制访问私有数据" class="headerlink" title="类外强制访问私有数据"></a>类外强制访问私有数据</h3><p><strong>进阶↓</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">        self.__name=n</span><br><span class="line">        self.__age=a</span><br><span class="line">        self.__score=<span class="number">60</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__printer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.__name)</span><br><span class="line">stu1=Student(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>)</span><br><span class="line">stu1.__score=-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(stu1.__score)</span><br></pre></td></tr></table></figure><pre><code>-1</code></pre><p>“事实”证明：类外不仅能对类内__score变量强制赋值还能强制访问？？</p><p><strong>解析!!!</strong><br>并不是score私有化没有生效，而是因为python的动态性原因，而使stu1对象中新生成了变量”__score”,而后对新的普通值进行了读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1.__dict__)    <span class="comment"># 输出stu1对象的字典检查其内部数据</span></span><br></pre></td></tr></table></figure><pre><code>-1&#123;&#39;_Student__name&#39;: &#39;zhangsan&#39;, &#39;_Student__age&#39;: 20, &#39;_Student__score&#39;:60, &#39;__score&#39;: -1&#125;</code></pre><p>输出的字典中，”zhangsan”是类私有成员，”__socre”是强行新定义的动态添加的变量。<br><strong>python在检查到私有变量后会改变变量的名称：单下划线+类名+双下划线+变量名</strong></p><pre><code>_类名__变量名</code></pre><p><strong>这也是为什么在类外无法通过”__变量名”访问类的私有变量，因为名称已被python改变，输入原来变量名是无效的</strong><br>因此<br><strong>只要通过读取python改变的新的变量名就可以访问私有数据成员！！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(stu1._Student__score)   <span class="comment"># 访问新的名字</span></span><br></pre></td></tr></table></figure><pre><code>60</code></pre><h1 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h1><p><strong>作用：</strong>避免定义重复的语法和重复的变量</p><p><strong>形式：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">        self.name=n</span><br><span class="line">        self.age=a</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="string">&quot;模块&quot;</span> <span class="keyword">import</span> Human</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Human</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s,n,a</span>)：</span></span><br><span class="line"><span class="function">        <span class="title">self</span>.<span class="title">score</span>=<span class="title">s</span></span></span><br><span class="line"><span class="function">        <span class="title">super</span>(<span class="params">Student,self</span>).<span class="title">__init__</span>(<span class="params">n,a</span>)  #子类构造函数的继承</span></span><br><span class="line"><span class="function">        # <span class="title">Human</span>.<span class="title">__init__</span>(<span class="params">self,n,a</span>)</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h2 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h2><pre><code>super(子类名，self).__init__(父类构造函数形参)父类名.__init__(self,父类构造参数形参)</code></pre><h2 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a>super关键字：</h2><p>不仅可在子类构造函数中使用，也可在子类实例方法使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,n,a</span>):</span></span><br><span class="line">        self.name=n</span><br><span class="line">        self.age=a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is parent class&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Human</span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,s,n,a</span>):</span></span><br><span class="line">        self.score=s</span><br><span class="line">        <span class="built_in">super</span>(Student,self).__init__(n,a)  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Student,self).printer()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is subclass&quot;</span>)</span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="number">100</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>)</span><br><span class="line">stu1.printer()</span><br></pre></td></tr></table></figure><pre><code>this is parent classthis is subclass</code></pre><h2 id="面向对象三大特性："><a href="#面向对象三大特性：" class="headerlink" title="面向对象三大特性："></a>面向对象三大特性：</h2><ul><li><strong>继承性</strong></li><li><strong>封装性</strong></li><li><strong>多态性</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】正则表达式与JSON</title>
      <link href="/2021/12/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ejson/"/>
      <url>/2021/12/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ejson/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>定义</strong><br>正则表达式是一个特殊的字符序列，可以检测一个字符串是否与我们设定的这样的字符序列相匹配</p><p><strong>作用</strong><br>快速检索文本、实现一些替换文本的操作</p><p><em>比如</em></p><ol><li>检查一串数字是否为电话号码</li><li>检测一个字符串是否符合email</li><li>把一个文本里指定的单词替换为另一个单词</li></ol><p>栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;C|C++|Java|C#|Python|Javascript&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a.index(&#x27;Python&#x27;)   内置函数查找特定字符串，返回首下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;Python&#x27; in a)    in 操作符检测</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#正则表达式存在的模块</span></span><br><span class="line">r=re.findall(<span class="string">&#x27;Python&#x27;</span>,a)  <span class="comment">#re.findall(&#x27;正则表达式&#x27;,源串)</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>[&#39;Python&#39;]    # 返回一个列表</code></pre><p>改写原代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">&#x27;C|C++|Java|C#|Python|Javascript&#x27;</span></span><br><span class="line">r=findall(<span class="string">&#x27;Python&#x27;</span>,a)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(r)&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字符串中包含Python&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>正则表达式重要在规则（灵魂）上，而不是设置成常量（设置成‘Python’）</strong></p><p><strong>组成</strong><br>正则表达式由一系列普通字符和元字符所组成</p><ul><li>普通字符 （形如前面例子中的’Python’ ）</li><li>元字符<ul><li>‘\d’ 元字符（代表数字）</li><li>‘\D’ （代表非数字字符）</li><li>‘\w’（匹配数字和字母和下划线）     </li><li>‘\W’  匹配非单词字符（\r,\t,’ ‘）</li><li>‘\s’  匹配空白字符（空格回车制表）</li><li>. 匹配除换行符外所有字符</li></ul></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>[ ]中的字符集合</p><ul><li>在[]中匹配“或”的关系<pre><code>  [afc]</code></pre></li><li>在[]匹配取反操作 <pre><code>  [^afc]</code></pre></li><li>在[]中有顺序操作<pre><code>  [c-f]    # 匹配cdef</code></pre></li></ul><p><strong>概括字符集</strong></p><ul><li>‘\d’等价于[0-9]</li><li>‘\D’等价于[ ^0-9 ]</li><li>‘\w’等价于[A-Za-z0-9_]</li></ul><p>只能匹配出单字符（以一个字符为单位的结果），因为元字符是字符存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s=<span class="string">&#x27;abc, acc, adc,aec,afc,ahc&#x27;</span></span><br><span class="line"><span class="comment">#找出中间字母是a或者f的字符串</span></span><br><span class="line">r=re.findall(<span class="string">&#x27;a[cf]c&#x27;</span>,s)  <span class="comment"># a,c 普通字符定界，匹配出单词</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>[&#39;acc&#39;,&#39;afc&#39;]</code></pre><h3 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h3><p>假设在’pytho0python1pythonn2’串中寻找python<br><strong>表示形式</strong></p><ul><li><p>{  } 前面单个字符的重复</p><pre><code>  r=re.findall(&#39;[a-z]&#123;3&#125;&#39;,a)  # 数量词为3  r=re.findall(&#39;[a-z]&#123;3,6&#125;&#39;,a)  # 支持范围，重复3-6次</code></pre></li><li><p>*前面的字符(n)可以出现0次或者无限多次</p><pre><code>  r=re.findall(&#39;python*&#39;,a) # 表示一个重复的操作</code></pre></li><li><p>+前面的字符可以出现一次或者无限多次</p><pre><code>  r=re.findall(&#39;python+&#39;,a) # </code></pre></li><li><p>?前面的字符可以出现1次或者0次</p><pre><code>  r=re.findall(&#39;python?&#39;,a) # 去重操作</code></pre></li></ul><p>下面是’*’,’+’,’?’的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">&#x27;pytho0python1pythonn2&#x27;</span></span><br><span class="line">r= re.findall(<span class="string">&#x27;python*&#x27;</span>,a)</span><br><span class="line">s= re.findall(<span class="string">&#x27;python+&#x27;</span>,a)</span><br><span class="line">t= re.findall(<span class="string">&#x27;python?&#x27;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><pre><code>[&#39;pytho&#39;,&#39;python&#39;,&#39;pythonn&#39;][&#39;python&#39;,&#39;pythonn&#39;][&#39;pytho&#39;,&#39;python&#39;,&#39;python&#39;]</code></pre><p><strong>贪婪与非贪婪</strong><br>贪婪模式：努力寻找更多符合的条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">&#x27;pytho0python1pythonn2&#x27;</span></span><br><span class="line">r= re.findall(<span class="string">&#x27;python&#123;1,2&#125;&#x27;</span>,a) <span class="comment"># 匹配前面的单字符n出现1-2次</span></span><br><span class="line">s= re.findall(<span class="string">&#x27;python&#123;1,2&#125;?&#x27;</span>,a) <span class="comment">#非贪婪：匹配n只出现1次</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>[&#39;python&#39;, &#39;pythonn&#39;]   # 默认贪婪[&#39;python&#39;, &#39;python&#39;]    # 非贪婪</code></pre><p><strong>?的”非贪婪限制”和”自身意义”区别</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a=<span class="string">&#x27;pytho0python1pythonn2&#x27;</span></span><br><span class="line">r= re.findall(<span class="string">&#x27;python&#123;1,2&#125;&#x27;</span>,a)  <span class="comment"># 默认为贪婪</span></span><br><span class="line">s= re.findall(<span class="string">&#x27;python&#123;1,2&#125;?&#x27;</span>,a) <span class="comment"># ?限定非贪婪</span></span><br><span class="line">t= re.findall(<span class="string">&#x27;python?&#x27;</span>,a)      <span class="comment"># 自身意义（去重操作）</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><pre><code>[&#39;python&#39;,&#39;pythonn&#39;][&#39;python&#39;,&#39;python&#39;][&#39;pytho&#39;,&#39;python&#39;,&#39;python&#39;]</code></pre><h3 id="边界匹配"><a href="#边界匹配" class="headerlink" title="边界匹配"></a>边界匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">qq=<span class="string">&#x27;100001&#x27;</span></span><br><span class="line"><span class="comment">#检测4-8位QQ号</span></span><br><span class="line">r=re.findall(<span class="string">&#x27;^\d&#123;4,8&#125;$&#x27;</span>,qq)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p><strong>^:从源字符串开始匹配</strong><br><strong>$:从源字符串末尾匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">qq=<span class="string">&#x27;10000001&#x27;</span></span><br><span class="line"><span class="comment">#检测4-8位QQ号</span></span><br><span class="line">t=re.findall(<span class="string">&#x27;000&#x27;</span>,qq)</span><br><span class="line">r=re.findall(<span class="string">&#x27;^000&#x27;</span>,qq)  <span class="comment"># 要匹配源串必须以000开头 （1开头）</span></span><br><span class="line">s=re.findall(<span class="string">&#x27;000$&#x27;</span>,qq)  <span class="comment"># 要匹配源串必须以000结尾 （1结尾）</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>[000,000]   # 两组000[]          # 字符串开始匹配为非0，所以无匹配结果</code></pre><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&#x27;PythonPythonPythonPtyhonPython&#x27;</span></span><br><span class="line">r=re.findall(<span class="string">&#x27;(Python)&#123;3&#125;(JS)&#x27;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>()组:里面的字符为且关系，一个正则表达式中可以有多个组<br>[]字符集：里面字符为或关系</p><h3 id="re-findall第三个参数"><a href="#re-findall第三个参数" class="headerlink" title="re.findall第三个参数"></a>re.findall第三个参数</h3><p>第三个参数代表 模式：<br>re.I 忽略第一个参数大小写<br>re.S .将匹配所有字符（包括换行符\n）<br>第三个参数中可以有多个模式 用|连接 表示 且 关系</p><h2 id="re模块下的其他函数"><a href="#re模块下的其他函数" class="headerlink" title="re模块下的其他函数"></a>re模块下的其他函数</h2><h3 id="re-sub-字符串替换"><a href="#re-sub-字符串替换" class="headerlink" title="re.sub()字符串替换"></a>re.sub()字符串替换</h3><p>5个参数</p><ol><li>pattern：正则表达式（精准定位）</li><li>要替换成的新串</li><li>源串</li><li>count参数：所能被替换最大次数（0默认为贪婪 全部替换）</li></ol><p><strong>强大部分：第二个参数可以是函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">language=<span class="string">&#x27;PythonC#JavaC#PHPC#&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">r=re.sub(<span class="string">&#x27;C#&#x27;</span>,convert,language)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>PythonJavaPHP      # C#被全部删除</code></pre><p><strong>原理：</strong><br>第一个正则表达式将作为传入第二个函数<br>函数返回的结果将作为第二个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">language=<span class="string">&#x27;PythonC#JavaC#PHPC#&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">r=re.sub(<span class="string">&#x27;C#&#x27;</span>,convert,language)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>&lt;re.Match object; span=(6, 8), match=&#39;C#&#39;&gt;&lt;re.Match object; span=(12, 14), match=&#39;C#&#39;&gt;&lt;re.Match object; span=(17, 19), match=&#39;C#&#39;&gt;PythonJavaPHP</code></pre><p>通过print(value)发现，C#被传入了value object（对象）进而传入函数sub中。<br>span表示C#在源串中的位置(第a个字符之后，第b个字符结束)<br>从value中对象拿出结果C#方法</p><pre><code>matched=value.group()  #用matched接收</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">language=<span class="string">&#x27;PythonC#JavaC#PHPC#&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">value</span>):</span></span><br><span class="line">    matched=value.group()  <span class="comment"># 提取C#</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;!!&#x27;</span>+matched+<span class="string">&#x27;!!&#x27;</span></span><br><span class="line">r=re.sub(<span class="string">&#x27;C#&#x27;</span>,convert,language)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>Python!!C#!!Java!!C#!!PHP!!C#!!</code></pre><p>第二个函数为参数的意义：</p><p>根据不同结果进行不同的替换操作</p><p><em>比如：将’ABC3721D86串中的大于6的数字替换成9，小于等于6的数字替换成0</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">language=<span class="string">&#x27;ABC3721D86&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">value</span>):</span></span><br><span class="line">    matched=value.group()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(matched)&gt;<span class="number">6</span>: <span class="comment"># 传入函数的是字符</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;9&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>  <span class="comment"># 返回字符串的应该是字符串，不能直接返回int型数字</span></span><br><span class="line">r=re.sub(<span class="string">&#x27;\d&#x27;</span>,convert,language)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>ABC0900D90</code></pre><p>输入函数的是一个字符串，return回来的也须是一个字符串</p><h3 id="match-函数和search-函数"><a href="#match-函数和search-函数" class="headerlink" title="match()函数和search()函数"></a>match()函数和search()函数</h3><p>match():从源字符串首字母开始匹配，如果没有匹配，则返回None<br>search()：搜索整个字符串，若找到第一个匹配字符串，返回一个对象。<br>如果要读取对象返回的结果</p><pre><code>r.group()</code></pre><p>如果要读取返回的位置</p><pre><code>r.span()</code></pre><p>match()和search()都只会匹配一次，findall()会找出所有匹配结果</p><p><strong>group分组</strong></p><p><em>提取字符串’life is short, i use python’中life和python之间的内容</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s=<span class="string">&#x27;life is short, i use python&#x27;</span></span><br><span class="line">r=re.search(<span class="string">&#x27;life(.*)python&#x27;</span>,s)  <span class="comment"># .*定位除了换行符外所有字符 （*：重复操作）</span></span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code> is short, i use </code></pre><p><strong>group():</strong></p><ul><li>可以传入一个参数，指定获取的组号，默认group(0)</li><li>若要访问内部分组，从group(1)开始<br>（group(0)属于特殊情况：永远记录正则表达式完整匹配结果）</li><li>可同时访问多个组号<pre><code>  print(r.group.(0,1,2))  # 以元组形式返回</code></pre></li></ul><p><strong>groups()：</strong></p><p>只会返回中间()匹配项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s=<span class="string">&#x27;life is short, i use python, i love python&#x27;</span></span><br><span class="line">r=re.search(<span class="string">&#x27;life(.*)python(.*)python&#x27;</span>,s) </span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(r,groups())</span><br></pre></td></tr></table></figure><pre><code>(&#39;life is short, i use python, i love python&#39;, &#39; is short, i use &#39;, &#39;,i love &#39;)(&#39; is short, i use &#39;, &#39;, i love &#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】时间空间复杂度</title>
      <link href="/2021/12/24/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2021/12/24/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h2 id="导：函数的渐进增长"><a href="#导：函数的渐进增长" class="headerlink" title="导：函数的渐进增长"></a>导：函数的渐进增长</h2><p>判断一个算法的效率时候，函数中的常数和其他次要项常常可以忽略，更应该关注主项（最高项）的阶数。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>在进行算法分析时，语句总的执行次数T(n)是关于规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。</li><li>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。<br>它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，橙汁算法的渐进时间复杂度，简称为时间复杂度。</li><li>其中f(n)是问题规模n的某个函数</li></ul><p><strong>注：</strong></p><ul><li>一般情况下，随着规模n的增大，T(n)增长最慢的算法为最优算法</li><li>显然，由算法时间复杂度定义可知，三个求和算法的时间复杂度分别为O(1)，O(n)，O(n<sup>2</sup>）。</li></ul><h2 id="推导时间复杂度的方法"><a href="#推导时间复杂度的方法" class="headerlink" title="推导时间复杂度的方法"></a>推导时间复杂度的方法</h2><ol><li>用常数1取代运行时间中的所有加法常数</li><li>在修改后的运行函数中，只保留最高阶项</li><li>如果最高阶项存在且不是1，则去除与这个项相乘的常数</li><li>得到结果即为时间复杂度</li></ol><h2 id="时间复杂度情况"><a href="#时间复杂度情况" class="headerlink" title="时间复杂度情况"></a>时间复杂度情况</h2><h3 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h3><p>程序片段如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;n=<span class="number">100</span>;    cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">sum=(n+<span class="number">1</span>)*n/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>时间复杂度为<del>O(8)</del></p><p>而是O(1) √（常数级统一用1表示）</p><h3 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h3><p>一般含有非嵌套循环涉及线性阶，线性阶就是随着问题规模n的增大，对应计算次数呈直线增长。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,n=<span class="number">100</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)；</p><p>因为循环体中的代码需要执行n次。</p><h3 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h3><p>嵌套循环涉及平方阶</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=,i,n=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n<sup>2</sup>)</p><p>升级版↓</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=,i,n=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=i;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>分析</em></p><p>需要执行n+(n-1)+(n-2)+···+1次</p><p>即为$\frac{(n+1)*n}{2}$次，即为n<sup>2</sup>/2+n/2</p><p>去除低阶加法项，去除最高阶系数</p><p>时间复杂度为O(n<sup>2</sup>)</p><h3 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h3><p>程序片段如下↓</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,n=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">    i=i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>分析</em></p><p>假设程序需要执行m次</p><p>2<sup>m</sup>=n</p><p>m=$\log_2 n$</p><p>时间复杂度为O($\log_2 n$)</p><h2 id="函数调用的时间复杂度分析"><a href="#函数调用的时间复杂度分析" class="headerlink" title="函数调用的时间复杂度分析"></a>函数调用的时间复杂度分析</h2><p>程序片段↓</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j,n=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fun</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>分析</em></p><p>fun函数的时间复杂度为O(1)</p><p>程序在循环中调用n次fun函数</p><p>程序的时间复杂度为O(n)</p><p><strong>升级版↓</strong></p><p>如果fun函数的时间复杂度为O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么程序的for循环调用n次fun函数</p><p>时间复杂度为O($n^2$)</p><p><strong>再升级版↓</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,n=<span class="number">100</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="built_in">fun</span>(n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fun</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=i;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;num; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>分析</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,n=<span class="number">100</span>;</span><br><span class="line">i++;  <span class="comment">//时间复杂度：O(1)</span></span><br><span class="line"><span class="built_in">fun</span>(n);<span class="comment">//时间复杂度：O(n)</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//循环时间复杂度：O(n^2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fun</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//嵌套循环时间复杂度：O(n^2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=i;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为并列，所以三个时间复杂度相加=2*$n^2$+n+1</p><p>整个程序时间复杂度为O($n^2$)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th align="center">例子</th><th align="center">时间复杂度</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">5201314</td><td align="center">O(1)</td><td align="center">常数阶</td></tr><tr><td align="center">3n+4</td><td align="center">O(n)</td><td align="center">线性阶</td></tr><tr><td align="center">3$n^2$+4n+5</td><td align="center">O($n^2$)</td><td align="center">平方阶</td></tr><tr><td align="center">3$\log_2 n$+4</td><td align="center">O($\log_2 n$)</td><td align="center">对数阶</td></tr><tr><td align="center">2n+3n$\log_2 n$+14</td><td align="center">O(n$\log_2 n$)</td><td align="center">n$\log_2 n$阶</td></tr><tr><td align="center">$n^3$+2$n^2$+4n+6</td><td align="center">O($n^3$)</td><td align="center">立方阶</td></tr><tr><td align="center">$2^n$</td><td align="center">O($2^n$)</td><td align="center">指数阶</td></tr></tbody></table><ul><li>常用的时间复杂度所耗费的时间从小到大依次是<br>O(1)&lt; O($\log_2 n$)&lt; O(n)&lt; O(n$\log_2 n$)&lt; O($n^2$)&lt; O($n^3$)&lt; O($2^n$)&lt; O(n!)&lt; O($n^n$)</li></ul><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><ul><li>通过计算算法所需的存储空间实现</li><li>计算公式记作：S(n)=O(f(n))<br>　其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数</li><li>通常，“时间复杂度”指运行时间的需求，“空间复杂度”指空间需求。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】绪论</title>
      <link href="/2021/12/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%BB%AA%E8%AE%BA/"/>
      <url>/2021/12/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>程序设计=数据结构+算法</li><li>数据结构是元素之间相互存在的一种或多种特定关系的集合</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><strong>逻辑结构：</strong>是指数据对象中元素之间的相互关系。<strong>四大逻辑结构:</strong><ol><li><em>集合结构</em>：结合结构中的数据元素出了同属一个集合外，无其他关系。</li><li><em>线性结构</em>：线性结构中的数据元素之间是一对一的关系、</li><li><em>树形结构</em>：树形结构中的数据元素之间存在一种一对多的层次关系。（金字塔结构）</li><li><em>图形结构</em>：图形结构的数据元素是多对多的关系。（杂交）</li></ol></li><li><strong>物理结构：</strong>是指数据的逻辑结构在计算机中的存储形式。 <strong>数据两种存储形式：</strong><ol><li><em>顺序存储</em>：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。例如：数组结构。</li><li><em>链式存储</em>：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。<br>　　　需要用一个指针存放数据元素的地址，通过地址就可以找扫相  关联元素的位置。</li></ol></li></ul><h1 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>算法是<em>解决特定问题求解步骤的描述</em>，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p><h2 id="五个基本特征"><a href="#五个基本特征" class="headerlink" title="五个基本特征"></a>五个基本特征</h2><ol><li>输入<ul><li>算法具有0个输入或多个输入</li></ul></li><li>输出<ul><li>算法至少有一个或多个输出</li></ul></li><li>有穷性<ul><li>指算法在执行有限步骤之后，自动结束而不会出现无限循环，且每一步骤在可接受的时间内完成。</li></ul></li><li>确定性<ul><li>算法的每一个步骤都具有确定的含义，不会出现二义性。</li><li>算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。</li><li>算法的每个步骤都应该被精确定义而无歧义。</li></ul></li><li>可行性<ul><li>算法每一步都能通过执行有限次数完成。</li></ul></li></ol><h2 id="设计的要求"><a href="#设计的要求" class="headerlink" title="设计的要求"></a>设计的要求</h2><ul><li>正确性：<ol><li>算法程序没有语法错误 </li><li>算法程序对于合法输入能够产生满足要求的输出</li><li>算法程序对于非法输入能够产生满足规格的输出</li><li>算法程序对于故意刁难的测试输入都有满足要求的输出结果</li></ol></li><li>可读性</li><li>健壮性</li><li>时间效率高和存储量低</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自学 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第四章 数组</title>
      <link href="/2021/12/24/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
      <url>/2021/12/24/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="实践题1"><a href="#实践题1" class="headerlink" title="实践题1"></a>实践题1</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>编程序，实现如下功能：</p><p>（1）定义两个一维数组x，y，不超过50个元素。</p><p>（2）从键盘输入k个整数到数组x中。</p><p>（3）计算x中数据的平均值ave及大于平均值的元素个数n并输出。</p><p>（4）将数组x中数据复制到数组y中，重复的数据只存储一次，最后输出y中的数据。<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>输入两行，第一行为输入的数据个数，第二行若干整数，每个整数后面有一个空格用于分隔；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>　　第一行若干整数，每个整数后面有一个空格，最后一个空格后换行；第二行若干整数，每个整数后面有一个空格，最后一个空格后不需要换行；<br><strong><font size=4>【样例输入】</font></strong></p><pre><code>66 3 4 3 2 9</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>4.5 26 3 4 2 9</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">50</span>],y[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,sum=<span class="number">0</span>,n=<span class="number">0</span>,m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> avg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x[i];</span><br><span class="line">sum+=x[i];</span><br><span class="line">&#125;</span><br><span class="line">avg=(<span class="keyword">float</span>)sum/k;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x[j]&gt;avg)</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>,y[<span class="number">0</span>]=x[<span class="number">0</span>],m=<span class="number">1</span>;i!=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(x[i]==x[j])</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">if</span>(j==i)</span><br><span class="line">&#123;</span><br><span class="line">    y[m]=x[i];</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;avg&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    cout&lt;&lt;y[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题2"><a href="#实践题2" class="headerlink" title="实践题2"></a>实践题2</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　有 12 人围坐成一圈玩报数游戏，从1号人员开始顺时针报数，报到k的人员被淘汰出局；接着仍沿顺时针方向从被淘汰出局者的下一人员又重新从 1 开始报数，报到 k的人被淘汰；如此继续，直到最后只剩下一个人时停止。请编写程序输出最后所剩那个人的编号。</p><p>注意：<br>（1）假设参加游戏的人的编号沿顺时针方向依次为 1 到 12，可以使用数组来存放各数据；</p><p>（2）k&gt;1，由用户通过 cin 输入指定。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入一个整数，代表报数值；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出一个整数，即最后剩下的人的编号；</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>3</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>10</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,n=<span class="number">12</span>,t=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">13</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>,t=<span class="number">1</span>;i&lt;=k;t++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;=<span class="number">13</span>)</span><br><span class="line">    t=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[t]==<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i==k)</span><br><span class="line">    &#123;</span><br><span class="line">a[t]=<span class="number">0</span>;</span><br><span class="line">    n--;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题3"><a href="#实践题3" class="headerlink" title="实践题3"></a>实践题3</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　小宗想知道两个日期之间所间隔的天数，他希望有一个日期计算器，输入两个日期后能够自动计算之间的天数。<br>要求：设计相应的函数完成天数的计算，在主函数中验证正确性。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>按照年月日的顺序输入两个日期，年月日之间用一个空格分隔；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出两个日期之间的天数，即一个整数，整数后不需要换行；</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>2016 3 62017 1 1</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>301</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>)&amp;&amp;(year%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">int</span> <span class="title">past</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>,q=<span class="number">0</span>,i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;year;i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fun</span>(i))</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">q++; </span><br><span class="line"><span class="keyword">return</span> (<span class="number">366</span>*p+<span class="number">365</span>*q); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">now</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fun</span>(year))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:ans=day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:ans=<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:ans=<span class="number">31</span>+<span class="number">29</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:ans=<span class="number">31</span>+<span class="number">29</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:ans=day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:ans=<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:ans=<span class="number">31</span>+<span class="number">28</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+day;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:ans=<span class="number">31</span>+<span class="number">28</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">31</span>+<span class="number">30</span>+<span class="number">31</span>+<span class="number">30</span>+day;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,p,q,r;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;p&gt;&gt;q&gt;&gt;r;</span><br><span class="line">cout&lt;&lt;<span class="built_in">abs</span>(<span class="built_in">past</span>(a)+<span class="built_in">now</span>(a,b,c)-<span class="built_in">past</span>(p)-<span class="built_in">now</span>(p,q,r));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题4"><a href="#实践题4" class="headerlink" title="实践题4"></a>实践题4</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　对于整型数组a[10]和b[10]，编制程序完成下列任务:</p><p>（1）由用户从键盘为两个数组输入值；</p><p>（2）求出两个数组的最大值和最小值；</p><p>（3）把数组a和b中的整数分别从小到大和从大到小排序；</p><p>（4）把两个有序的数组a和b组成一个长度为20的有序数组c[20]，使数组c的顺序为从小到大</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入两行整数，每行10个，第一行是数组a里的数组，第二行是数组b里的数值；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>　　输出五行，第一行有两个整数，分别是数组a的最大值和最小值，两个整数之间用一个空格分隔；第二行有两个整数，分别是数组b的最大值和最小值，两个整数之间用一个空格分隔；第三行按照从小到大的顺序输出数组a里的数值，每个数字后面有一个空格，最后一个数字后面也有空格；第四行按照从大到小的顺序输出数组b里的数值，每个数字后面有一个空格，最后一个数字后面也有空格；第五行按照从小到大的顺序输出合并后数组c里的数值，每个数字后面有一个空格，最后一个数字后面也有空格。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>2 5 9 1 3 4 0 6 7 810 5 25 9 6 3 7 1 2 13</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>9 025 10 1 2 3 4 5 6 7 8 925 13 10 9 7 6 5 3 2 10 1 1 2 2 3 3 4 5 5 6 6 7 7 8 9 9 10 13 25</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comparemax</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>,i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;x[i])</span><br><span class="line">max=x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">comparemin</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min,i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,min=x[<span class="number">0</span>];i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(min&gt;x[i])</span><br><span class="line">min=x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span><span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">10</span><span class="number">-1</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],b[<span class="number">10</span>],i,c[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">up</span>(a,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">down</span>(b);</span><br><span class="line">cout&lt;&lt;<span class="built_in">comparemax</span>(a)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">comparemin</span>(a)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">comparemax</span>(b)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">comparemin</span>(b)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">c[i]=a[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">10</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">c[i]=b[i<span class="number">-10</span>];</span><br><span class="line"><span class="built_in">up</span>(c,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;c[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题5"><a href="#实践题5" class="headerlink" title="实践题5"></a>实践题5</h2><p> <strong><font size=4>【问题描述】</font></strong></p><p>　　利用cin.getline()函数从键盘录入一句英文，其中每个单词之间用一个空格隔开，最后用’.’结束。统计该句话中单词的个数，并依次输出每个单词。输出个数后换行，输出每个单词后也换行。注意：在本平台下，cin.getline()函数的使用方式如下：</p><p>char s[50];</p><p>cin.getline(s,50); //最多存储49个字符</p><p> <strong><font size=4>【输入形式】</font></strong></p><p>输入一句英文，其中每个单词之间用一个空格隔开，最后一个单词后面用英文的’.’作为结束；</p><p> <strong><font size=4>【输出形式】</font></strong></p><p>输出每个单词后换行，最后一行输出单词的数量。</p><p> <strong><font size=4>【样例输入】</font></strong></p><pre><code>I like juice.</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>Ilikejuice3</code></pre><p>（请严格按照规定的格式输入和输出。）</p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,num=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">char</span> s[<span class="number">50</span>];</span><br><span class="line">   cin.<span class="built_in">getline</span>(s,<span class="number">50</span>);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(s[i]!=<span class="number">32</span>&amp;&amp;s[i]!=<span class="number">46</span>)</span><br><span class="line">   cout&lt;&lt;s[i];</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">   num++;</span><br><span class="line">   cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第三章 函数</title>
      <link href="/2021/12/24/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
      <url>/2021/12/24/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="实践题1"><a href="#实践题1" class="headerlink" title="实践题1"></a>实践题1</h2><p><strong><font size=4>【问题描述】</font></strong></p><p> 　　编写具有如下原型的函数：bool f(long x);其功能为：若整数 x 仅由偶数字（0、2、4、6、8）组成时（如 x=26480），函数返回 true，否则返回 false（如当 x=22034 时）。并编制主函数对它进行调用。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>只能是一个整数数字，中间不能有空格等其他字符；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>只输出true或者false，后面不要换行。<br><strong><font size=4>【样例输入】</font></strong></p><pre><code>26480</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>true</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">i=n%<span class="number">10</span>;</span><br><span class="line">n/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>||i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> x;</span><br><span class="line">   cin&gt;&gt;x;</span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">f</span>(x))</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;true&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;false&quot;</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="实践题2"><a href="#实践题2" class="headerlink" title="实践题2"></a>实践题2</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　编写具有如下原型的函数：void find(int i, int n); 实现从 i 开始找起，连续找出 n 个素数并显示在屏幕上。如：实参为10 和 8 后，输出的 8 个素数应为：11，13，17，19，23，29，31，37。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入两个整数，前一个是查找的起始数字，后一个是指定查找几个素数；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>　　输出指定数量的素数，每个素数后面加一个空格作为分隔符，最后一个数字后面可以有一个空格，但不需要换行。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>13 4</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>13 17 19 23</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,k,t;</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(x=i;;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">2</span>;k&lt;x;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x%k==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(k==x<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,n;</span><br><span class="line">cin&gt;&gt;i&gt;&gt;n;</span><br><span class="line">    <span class="built_in">find</span>(i,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题3"><a href="#实践题3" class="headerlink" title="实践题3"></a>实践题3</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　输入正整数start和end，找出从start到end这一区间段内哪一个数n的因子和最大，并将该n及其因子和maxSum作为结果输出。例如，当start=10，end=15时，所求的n应该为12，而maxSum应该为16。</p><p>要求：设计函数计算n的因子和，其中因子和为包括1但不包括n本身的所有因子之和。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>两个整数，用来指定查找的起始数字和结束数字；</p><p><strong><font size=4>【输出形式】</font></strong></p><p>　　两个整数，中间用一个空格隔开，前一个是因子和最大的数字，后一个是因子和，最后一个数字后面不要有空格和换行。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>10 15</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>12 16</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> start,end,i,j,sum,maxSum,n;</span><br><span class="line">maxSum=<span class="number">0</span>;</span><br><span class="line">n=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;start&gt;&gt;end;</span><br><span class="line"><span class="keyword">for</span>(j=start;j&lt;=end;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>,sum=<span class="number">0</span>;i&lt;j;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxSum&lt;sum)</span><br><span class="line">&#123;</span><br><span class="line">maxSum=sum;</span><br><span class="line">n=j;</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br><span class="line">cout&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题4"><a href="#实践题4" class="headerlink" title="实践题4"></a>实践题4</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　404NOT FOUND</p><p><strong><font size=4>【输入形式】</font></strong></p><p>404NOT FOUND</p><p><strong><font size=4>【输出形式】</font></strong></p><p>404NOT FOUND</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>404NOT FOUND</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>404NOT FOUND</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">404</span>NOT FOUND</span><br></pre></td></tr></table></figure><h2 id="实践题5"><a href="#实践题5" class="headerlink" title="实践题5"></a>实践题5</h2><p> <strong><font size=4>【问题描述】</font></strong></p><p>　　键盘输入正整数 n，求出n与其反序数x之和并输出。例如，输入2038，n+x = 2038 +8302 =10340，输出应为10340。要求：编写函数实现数据转换成反序数值。</p><p> <strong><font size=4>【输入形式】</font></strong></p><p>输入一个整数；</p><p> <strong><font size=4>【输出形式】</font></strong></p><p>输出一个整数；</p><p> <strong><font size=4>【样例输入】</font></strong></p><pre><code>2038</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>10340</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i,j,sum=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(n/(<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>,i)==<span class="number">0</span>)</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line"> &#123;</span><br><span class="line"> t=n%<span class="number">10</span>;</span><br><span class="line"> n/=<span class="number">10</span>;</span><br><span class="line">sum+=t*<span class="built_in">pow</span>(<span class="number">10</span>,j);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> n;</span><br><span class="line"> cin&gt;&gt;n;</span><br><span class="line"> cout&lt;&lt;n+<span class="built_in">fun</span>(n);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】字典和结构化数据</title>
      <link href="/2021/12/24/%E5%AD%97%E5%85%B8%E5%92%8C%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"/>
      <url>/2021/12/24/%E5%AD%97%E5%85%B8%E5%92%8C%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="字典数据类型"><a href="#字典数据类型" class="headerlink" title="字典数据类型"></a>字典数据类型</h1><h2 id="利用键访问对应值"><a href="#利用键访问对应值" class="headerlink" title="利用键访问对应值"></a>利用键访问对应值</h2><p>像列表一样，“字典”是许多值的集合。但不像列表的下标，字典的索引可以使用很多不同数据类型，不只是整数。</p><ul><li>键：字典的索引被称为“键”</li><li>键-值对：键及其相关联的值称为“键-值”对</li></ul><p>字典长下面这个样子↓</p><pre><code>myCat=&#123;&#39;size&#39;=&#39;fat&#39;,&#39;color&#39;=&#39;gray&#39;,&#39;disposition&#39;=&#39;loud&#39;&#125;</code></pre><ul><li>这是将一个字典变量赋给myCat变量</li><li>字典的键是’size’、’color’和’disposition’</li><li>这些键对应的值为’fat’、’gray’和’loud’</li></ul><p>可以通过键访问对应的值↓（就像通过下标访问列表对应的值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myCat=&#123;<span class="string">&#x27;size&#x27;</span>=<span class="string">&#x27;fat&#x27;</span>,<span class="string">&#x27;color&#x27;</span>=<span class="string">&#x27;gray&#x27;</span>,<span class="string">&#x27;disposition&#x27;</span>=<span class="string">&#x27;loud&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(myCat[size])</span><br></pre></td></tr></table></figure><pre><code>fat</code></pre><h2 id="无法切片"><a href="#无法切片" class="headerlink" title="无法切片"></a>无法切片</h2><p>字典的表项是不排序的，所以不能像列表那样切片</p><h2 id="in操作符"><a href="#in操作符" class="headerlink" title="in操作符"></a>in操作符</h2><p>可以使用in操作符判断前面输入的字符串是否作为键存在于字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">birthday=&#123;<span class="string">&#x27;Alice&#x27;</span>:<span class="string">&#x27;April 4&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>:<span class="string">&#x27;Dec 12&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Alice&#x27;</span> <span class="keyword">in</span> birthday)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h1 id="字典使用"><a href="#字典使用" class="headerlink" title="字典使用"></a>字典使用</h1><p>有三个字典方法</p><h2 id="keys-、values-和items-方法"><a href="#keys-、values-和items-方法" class="headerlink" title="keys()、values()和items()方法"></a>keys()、values()和items()方法</h2><p><strong>1.keys()返回字典键</strong></p><pre><code>t=字典名.keys()</code></pre><p><strong>2.values()返回字典值</strong></p><pre><code>v=字典名.values()</code></pre><p><strong>3.items()返回字典键-值对</strong></p><pre><code>i=字典名.items()</code></pre><p><strong>与for循环的结合迭代</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam=&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">42</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> spam.keys(): </span><br><span class="line">    <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><p><strong>与in、not in 操作符结合</strong><br>检查某个键和值是否在字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;SYolin&#x27;</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> spam.keys())</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><h2 id="get-方法访问字典中的键"><a href="#get-方法访问字典中的键" class="headerlink" title="get()方法访问字典中的键"></a>get()方法访问字典中的键</h2><p>get()方法有两个参数：</p><pre><code>字典名.get(要取的键，若键不存在返回的备用值)</code></pre><p>有效避免了在取得字典中的键或值之前，还需检查检查是否存在的步骤</p><h2 id="setdefault-方法"><a href="#setdefault-方法" class="headerlink" title="setdefault()方法"></a>setdefault()方法</h2><p>当需要为字典中的某个键设置一个默认值，当该键没有任何值时使用它</p><p>就像达到以下的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Pooka&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;color&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> spam:</span><br><span class="line">    spam[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;black</span></span><br></pre></td></tr></table></figure><p><strong>setdefault()提供了一种方式，在一行中完成这件事，需要传递两个参数</strong></p><p><strong>1.第一个参数是要检查的键</strong></p><p><strong>2、第二个参数是，如果该键不存在时要设置的值。如果该键存在，第二个参数不会被使用</strong></p><pre><code>字典名.setdefault(检查的键,不存在时设置的值)</code></pre><p>对上面的代码进行改进↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Pooka&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">spam.setdefault(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="string">&#x27;color&#x27;</span>])</span><br></pre></td></tr></table></figure><pre><code>black</code></pre><p><strong>setdefault()方法是一个很好地快捷方式，可以确保一个键的存在。</strong></p><h1 id="漂亮打印"><a href="#漂亮打印" class="headerlink" title="漂亮打印"></a>漂亮打印</h1><p><strong>导入pprint模块</strong>，就可以使用pprint()和pformat()函数<br>可以以键-值对成行“漂亮”打印一个字典值</p><ul><li>pprint()：打印到屏幕上</li><li>pformat():得到漂亮文本的字符串，而不是打印到屏幕上</li></ul><p>使用↓</p><pre><code>pprint.pprint(字典名)          # 打印到屏幕上pprint.pformat(字典名)         # 得到字符串print(pprint.pformat(字典名))  # 和第一行代码等价</code></pre><h1 id="利用字典统计句子每个字符个数"><a href="#利用字典统计句子每个字符个数" class="headerlink" title="利用字典统计句子每个字符个数"></a>利用字典统计句子每个字符个数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">message=<span class="string">&#x27;It was a bright cold day in April, and the clocks were strking thirteen.&#x27;</span></span><br><span class="line">count=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line">    count.setdefault(character,<span class="number">0</span>)</span><br><span class="line">    count[character]+=<span class="number">1</span></span><br><span class="line">pprint.pprint(count)</span><br></pre></td></tr></table></figure><p><strong>如果是取得某个字符的个数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">message=<span class="string">&#x27;It was a bright cold day in April, and the clocks were strking thirteen.&#x27;</span></span><br><span class="line">target=<span class="built_in">input</span>()</span><br><span class="line">count=&#123;target:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> message:</span><br><span class="line">    <span class="keyword">if</span> character <span class="keyword">in</span> count:  <span class="comment"># 直接用in操作符检查输入的名字是否作键存在于字典中</span></span><br><span class="line">        count[target]+=<span class="number">1</span></span><br><span class="line">pprint.pprint(count)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python 实战】 列表与字符串的转换</title>
      <link href="/2021/12/24/%E5%88%97%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/12/24/%E5%88%97%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="列表转换为字符串"><a href="#列表转换为字符串" class="headerlink" title="列表转换为字符串"></a>列表转换为字符串</h1><h2 id="‘’-join-函数"><a href="#‘’-join-函数" class="headerlink" title="‘’.join()函数"></a>‘’.join()函数</h2><ul><li><p>需要新的变量接收返回的字符串</p></li><li><p>只能处理值全部为字符串类型的列表</p><pre><code>  newstr=&#39;列表值之间添加的内容&#39;.join(someList)</code></pre></li></ul><p><em>列表单词连句子：</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="string">&#x27;this&#x27;</span>,<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;an&#x27;</span>,<span class="string">&#x27;example&#x27;</span>]</span><br><span class="line">newStr=<span class="string">&#x27; &#x27;</span>.join(someList)    <span class="comment"># 在每个值之间添加一个&#x27; &#x27;组成新的字符串</span></span><br><span class="line"><span class="built_in">print</span>(newStr)</span><br></pre></td></tr></table></figure><pre><code>This is an example</code></pre><p><em>列表数值无缝连接：</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">newStr=<span class="string">&#x27;&#x27;</span>.join(someList)  <span class="comment">#在每个值之间添加&#x27;&#x27;无缝连接</span></span><br><span class="line"><span class="built_in">print</span>(newStr)</span><br></pre></td></tr></table></figure><pre><code>0-670-82162-4</code></pre><p><em>只能处理值全部为字符串类型的列表：</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="number">4</span>]</span><br><span class="line">newStr=<span class="string">&#x27;&#x27;</span>.join(someList) </span><br><span class="line"><span class="built_in">print</span>(newStr)</span><br></pre></td></tr></table></figure><pre><code>**报错**     （因为列表中存在int整型值）</code></pre><h1 id="字符串转换为列表"><a href="#字符串转换为列表" class="headerlink" title="字符串转换为列表"></a>字符串转换为列表</h1><h2 id="list-函数"><a href="#list-函数" class="headerlink" title="list()函数"></a>list()函数</h2><ul><li>会将字符串中的每个字符（包括空格）全部打散成值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam=<span class="string">&#x27;This is an example&#x27;</span></span><br><span class="line">newList=<span class="built_in">list</span>(spam)</span><br><span class="line"><span class="built_in">print</span>(newList)</span><br></pre></td></tr></table></figure><pre><code>  [&#39;T&#39;, &#39;h&#39;, &#39;i&#39;, &#39;s&#39;, &#39; &#39;, &#39;i&#39;, &#39;s&#39;, &#39; &#39;, &#39;a&#39;, &#39;n&#39;, &#39; &#39;, &#39;e&#39;, &#39;x&#39;, &#39;a&#39;, &#39;m&#39;, &#39;p&#39;, &#39;l&#39;, &#39;e&#39;]</code></pre></li></ul><h2 id="split-函数"><a href="#split-函数" class="headerlink" title="split()函数"></a>split()函数</h2><ul><li><p>会根据传入的参数打散字符串,默认参数是’\n’（换行符）</p></li><li><p>需要新的列表来接收</p><pre><code>  newList=字符串.split()</code></pre></li></ul><p>句子打散成单词：传入’ ‘打散句子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam=<span class="string">&#x27;This is an example&#x27;</span></span><br><span class="line">newList=spam.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(newList)</span><br></pre></td></tr></table></figure><pre><code>[&#39;This&#39;, &#39;is&#39;, &#39;an&#39;, &#39;example&#39;]</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】函数式编程</title>
      <link href="/2021/12/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/12/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>python一切皆对象<br>python中函数</p><ol><li>可做另外一个函数的参数，传递到另外的函数里</li><li>把一个函数当做另一个函数的返回结果</li></ol><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>闭包=函数+环境变量</strong></p><ul><li>将函数和外部环境变量包在一起做一个封闭，不在受其他外部变量影响</li><li>环境变量一定在函数定义时的外部变量（不能是全局变量）</li><li>环境变量具有保存记忆的功能</li><li>通过闭包可实现在函数外部调用函数内部</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curve_pre</span>():</span></span><br><span class="line">    a=<span class="number">25</span>  <span class="comment"># a在外部环境中，是一个环境变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">curve</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> a*x*x</span><br><span class="line">    <span class="keyword">return</span> curve   <span class="comment"># 并不只返回函数，同时返回函数和环境变量</span></span><br><span class="line"></span><br><span class="line">f=curve_pre()</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>100</code></pre><p><em>闭包保存在__closure__变量中（检查是否是一个闭包）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(f.__closure__)  <span class="comment"># 查看f内容</span></span><br><span class="line"><span class="built_in">print</span>(f.__closure__[<span class="number">0</span>].cell_contents)  <span class="comment"># 取出f携带的环境变量</span></span><br></pre></td></tr></table></figure><pre><code>(&lt;cell at 0x0000022214C95D30: int object at 0x00007FF8970CC9A0&gt;,)25</code></pre><p>结论：f返回函数和环境变量</p><p><strong>意义</strong><br><strong>闭包保存的是一个环境，保存了调用的现场，记忆住了上次调用的状态</strong></p><h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="comment"># a此时将被python认为是局部变量，不会影响到外部变量</span></span><br><span class="line">        a=<span class="number">20</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    f2()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><pre><code>10 2010  #在f2内部对a重新赋值</code></pre><p><em>上面是一个闭包么？</em></p><p>简化一下↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        a=<span class="number">20</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">t=f1()</span><br><span class="line"><span class="built_in">print</span>(t.__closure__) <span class="comment"># 检查是否有值，是否是闭包</span></span><br></pre></td></tr></table></figure><pre><code>None</code></pre><p>不是闭包，因为f2中的a=20被python认为是局部变量，调用f2时不会引用f1中的环境变量，因此不算是闭包。</p><p>只要f2中的a不被赋值即可（可以被引用参与运算）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        c=<span class="number">20</span>*a  <span class="comment"># 是一个闭包</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">t=f1()</span><br><span class="line"><span class="built_in">print</span>(t.__closure__) <span class="comment"># 检查是否有值，是否是闭包</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><em>一个旅行者从x=0向前走，编写一个函数</em><br><em>x=3 result=3</em><br><em>x=5 result=8</em><br><em>x=6 result=14</em></p><p><strong>关键：每次调用函数时需要保存上次调用函数结果的状态</strong></p><p>非闭包： global全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">origin=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span> (<span class="params">step</span>):</span></span><br><span class="line">    <span class="keyword">global</span> origin  </span><br><span class="line">    new_pos=origin+step <span class="comment">#当函数中找不到origin的值，可到函数外部中寻找origin</span></span><br><span class="line">    origin=new_pos  <span class="comment"># origin在等号左边时，python会认为这是一个局部变量（解决：将origin改成全局变量）</span></span><br><span class="line">    <span class="keyword">return</span> origin</span><br></pre></td></tr></table></figure><p>闭包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">origin=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_pre</span>(<span class="params">loc</span>):</span>   <span class="comment"># loc变成了一个环境变量，具有保存记忆功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">go</span>(<span class="params">step</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> loc  <span class="comment"># 声明loc变量不是局部变量，不要在go函数中寻找</span></span><br><span class="line">        new_pos=loc+step</span><br><span class="line">        loc=new_pos </span><br><span class="line">        <span class="keyword">return</span> loc</span><br><span class="line">    <span class="keyword">return</span> go</span><br><span class="line">f = go_pre(origin)</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>3814       </code></pre><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p><strong>定义：</strong><br><em>lambada函数</em>（也称 <em>lambda表达式</em>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> paramer_list: expression</span><br></pre></td></tr></table></figure><ul><li>lambda：关键字</li><li>paramer_list:参数列表</li><li>expression:<font color=red>表达式</font>（只能是表达式，不能为代码块）</li><li>不需要return语句，表达式计算结果即为返回值</li></ul><p><strong>调用：</strong><br><em>借助赋值给变量调用</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def add(x,y):</span></span><br><span class="line"><span class="comment">#     return x+y</span></span><br><span class="line"></span><br><span class="line">f=<span class="keyword">lambda</span> x,y : x+y</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 并未体现出优势，是个无意义场景</span></span><br></pre></td></tr></table></figure><pre><code>3</code></pre><h2 id="附：三元表达式"><a href="#附：三元表达式" class="headerlink" title="附：三元表达式"></a>附：三元表达式</h2><p><strong>表达式版本的if，else语句</strong>（三元表达式在lambda函数中用处较多）</p><p>python版本</p><pre><code>条件为真返回的结果 if 条件判断 else 条件为假时的返回结果</code></pre><p>其他语言</p><pre><code>条件 ? 条件为真返回的结果 : 条件为假返回的结果</code></pre><p>栗子：两个数x,y，如果x&gt;y,取x，否则取y</p><p>python版本</p><pre><code>r= x if x&gt;y else y  </code></pre><p>其他语言</p><pre><code>r= x &gt; y ? x : y </code></pre><h1 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h1><pre><code>map(func,*iterables)  # *可变参数map(函数，（一个或多个）序列（集合）)</code></pre><p><strong>适用：</strong></p><p>对传入的集合/序列的每一个元素都会执行前面的函数，并接收返回的结果，生成一个对象，通过list()函数可以转换出列表<br>数学角度：映射<br>将传入的集合经过函数映射出新的集合</p><p><strong>map与lambda</strong><br><em>将list_x=[1,2,3,4,5]列表中的元素平方后生成新的列表</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list_y=<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*x,list_x)</span><br><span class="line"><span class="built_in">print</span>(list_y)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16, 25]</code></pre><p><strong>多个参数需注意：</strong></p><ul><li>后面列表传入的个数必须和前面lambda函数参数个数相同</li><li>最终得到的结果集合中元素的个数取决于传入的元素较少的集合中的元素个数</li></ul><h1 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce 归约"></a>reduce 归约</h1><pre><code>from functools import reduce  # 导入模块reduce(函数,序列，初始值)</code></pre><ul><li>原理：连续计算，连续调用函数</li><li>函数必须要有两个参数</li><li>初始值会在第一次调用lambda函数时参与运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce </span><br><span class="line">list_x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">r=reduce(<span class="keyword">lambda</span> x,y:x+y,list_x)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><pre><code>15</code></pre><ul><li>首次调用列表前两个元素作x,y</li><li>第二次调用取第一次调用结果为第一个参数，取第三个元素为第二个参数</li><li>第三次调用将结果作第一个参数，取下一个元素为参数</li><li>实质为“对序列求和”</li></ul><h1 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h1><pre><code>filter(函数，序列)</code></pre><p><em>栗子：过滤出list_x=[1,0,1,0,0,1]中的1</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_x=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">r=<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:<span class="literal">True</span> <span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span>,list_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br></pre></td></tr></table></figure><pre><code>[1,1,1]</code></pre><ul><li>返回的lambda函数必须存在if，else语句</li><li>如果返回True保留，返回False删除</li></ul><p><strong>高级：过滤大小写</strong></p><pre><code>r=filter(lambda x:True if x&gt;=&#39;A&#39;and x=&lt;&#39;Z&#39; else False,list_x)</code></pre><h1 id="命令式编程-与-函数式编程"><a href="#命令式编程-与-函数式编程" class="headerlink" title="命令式编程 与 函数式编程"></a>命令式编程 与 函数式编程</h1><p><strong>命令式编程组成</strong><br>def<br>if else<br>for</p><p><strong>函数式编程组成</strong><br>lambda（算子）：可替换def<br>map，reduce：可替换循环</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】杂记</title>
      <link href="/2021/12/24/python%E6%9D%82%E8%AE%B0/"/>
      <url>/2021/12/24/python%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="用字典映射代替switch-case语句"><a href="#用字典映射代替switch-case语句" class="headerlink" title="用字典映射代替switch case语句"></a>用字典映射代替switch case语句</h1><p>字典代替switch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch(day)</span><br><span class="line">&#123;</span><br><span class="line">    case 0:</span><br><span class="line">        dayName=&quot;Sunday&quot;;</span><br><span class="line">        break;</span><br><span class="line">    case 1:</span><br><span class="line">        dayName=&quot;Monday&quot;;</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        dayName=&quot;Tuesday&quot;;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        dayName=&quot;Unknwon&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">day=<span class="number">0</span></span><br><span class="line">switcher=&#123;<span class="number">0</span>:<span class="string">&#x27;Sunday&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;Monday&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;Tuesday&#x27;</span>&#125;</span><br><span class="line"> <span class="comment"># get方法检查字典的键，若不存在调用第二个参数</span></span><br><span class="line">day_name=switcher.get(day,<span class="string">&#x27;Unknown&#x27;</span>)   </span><br><span class="line"><span class="built_in">print</span>(day_name)</span><br></pre></td></tr></table></figure><p>如果case语句中下不是简单的语句，而是函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">day=<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Sunday</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Sunday&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Monday</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Monday&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_Tuesday</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Tuesday&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Get_default</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">switcher=&#123;<span class="number">0</span>:Get_Sunday,<span class="number">1</span>:Get_Monday,<span class="number">2</span>:Get_Tuesday&#125;</span><br><span class="line">day_name=switcher.get(day,Get_default)()  <span class="comment"># 当调用的值为方法时，在get方法后面加()，并且使第二个参数也为方法</span></span><br><span class="line"><span class="built_in">print</span>(day_name)</span><br></pre></td></tr></table></figure><pre><code>Sunday</code></pre><p><strong>当调用的值为方法时，在get方法后面加()，并且使第二个参数也为方法</strong></p><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><p>将a=[1,2,3,4,5]列表中的每个元素平方后生成新的列表<br><em>法一：map函数</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">result=<span class="built_in">map</span>(<span class="keyword">lambda</span> i :i*i,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure><p><em>法二：列表推导式</em></p><ul><li>建立一个新列表接收</li><li>新列表中用for循环遍历源列表的值</li><li>for循环前添加更改的条件,中间用空格隔开即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b=[i*i <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><pre><code>[1, 4, 9, 16, 25]</code></pre><p>i^2 等价于 i<strong>2<br>i^3 等价于 i</strong>3</p><p><strong>使用条件： 对源列表中有条件的筛选元素进行更改</strong><br>对大于3的元素进行平方处理<br><em>列表推导式:在for循环后添加if条件即可</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b=[i*i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i&gt;<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><pre><code>[16,25]</code></pre><p><em>map方法：map与filter过滤结合</em></p><p><strong>集合，字典，元组都可以被推导，只需把[]根据新的集合，字典，元组更改</strong></p><h2 id="字典列表推导式"><a href="#字典列表推导式" class="headerlink" title="字典列表推导式"></a>字典列表推导式</h2><p>需要通过for循环遍历字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students=&#123;<span class="string">&#x27;喜小乐&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;石敢当&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;横小五&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">b=[key <span class="keyword">for</span> key,values <span class="keyword">in</span> students.items()]   <span class="comment"># 遍历字典需要两个变量</span></span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 提取出字典中的键到列表中</span></span><br></pre></td></tr></table></figure><p>若要得到一个元组，只能返回一种key或value，得到的是一个对象</p><p><strong>只能通过for循环遍历打印得到全部的键或值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">students=&#123;<span class="string">&#x27;喜小乐&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;石敢当&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;横小五&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">b=(key <span class="keyword">for</span> key,values <span class="keyword">in</span> students.items())   <span class="comment"># 得到一个元组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:   <span class="comment"># for循环得到全部键</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>喜小乐石敢当横小五</code></pre><h1 id="None"><a href="#None" class="headerlink" title="None"></a>None</h1><p>None的值和类型<br>不等于 空字符串<br>不等于 空列表<br>不等于 False</p><p>Python中None本身是一个对象</p><p><strong>判空操作</strong></p><pre><code>if not a:    a=None    a=&#39; &#39;    a=[]    a=False</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】Python基础</title>
      <link href="/2021/12/24/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/24/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="常见数据类型"><a href="#常见数据类型" class="headerlink" title="常见数据类型"></a>常见数据类型</h2><table><thead><tr><th align="center">数据类型</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">整型</td><td align="center">-2,-1,0,1,2,3,4,5</td></tr><tr><td align="center">浮点型</td><td align="center">-1.25,-1.0,<strong>- -0.5</strong>,0.0,1.0</td></tr><tr><td align="center">字符串</td><td align="center">‘a’,’aa’,’Hello!’,’11cats’</td></tr></tbody></table><p><strong>注</strong><br>如果看到错误信息</p><pre><code>SyntaxError:EOL while scanning string literal</code></pre><p>可能是忘记了字符串末尾的单引号,就像下面例子↓</p><pre><code>&gt;&gt;&gt;&#39;Hello world!SyntaxError:EOL while scanning string literal</code></pre><h2 id="字符串的连接和复制"><a href="#字符串的连接和复制" class="headerlink" title="字符串的连接和复制"></a>字符串的连接和复制</h2><p>在python中，根据操作符之后的值的数据类型，操作符的含义可能改变。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="+运算符"></a>+运算符</h3><p>在用于两个整型或浮点型值时，+是相加操作符</p><p>在用于<font color=red>两个字符串</font>时，+是<font color=red>“字符串连接”操作符</font></p><p>看看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Alice&#x27;</span>+<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>AliceBob</code></pre><p><strong>注</strong><br>+不能用于一个字符串和一个整型值相加，否则会报错</p><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="*运算符"></a>*运算符</h3><p>当用于两个整型或浮点型值时，*表示乘法操作符</p><p>当用于<font color=red>一个字符串和一个整型值</font>时，*表示<font color=red>“字符串复制”操作符</font></p><p>看看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Alice&#x27;</span>*<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>AliceAliceAliceAliceAlice</code></pre><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>python的赋值语句包含一个变量名、一个等号（赋值操作符），以及要存储的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam=<span class="number">42</span>        <span class="comment">#spam变量被赋整型值42(就这么简单)</span></span><br></pre></td></tr></table></figure><p><strong>附</strong></p><p>有效和无效的变量名</p><table><thead><tr><th align="center">有效的变量名</th><th align="center">无效的变量名</th></tr></thead><tbody><tr><td align="center">balance</td><td align="center">current-balance（不允许中划线）</td></tr><tr><td align="center">currentBalance</td><td align="center">current balance（不允许空格）</td></tr><tr><td align="center">current_balance</td><td align="center">4account（不允许数字开头）</td></tr><tr><td align="center">_spam</td><td align="center">51（不允许数字开头）</td></tr><tr><td align="center">SPAM</td><td align="center">total_$sum（不允许这样的特殊字符）</td></tr><tr><td align="center">account4</td><td align="center">‘hello’（不允许 ‘ 这样的特殊字符）</td></tr></tbody></table><h2 id="常用基础函数"><a href="#常用基础函数" class="headerlink" title="常用基础函数"></a>常用基础函数</h2><h3 id="print-函数"><a href="#print-函数" class="headerlink" title="print()函数"></a>print()函数</h3><p>print()函数将括号内的内容显示到屏幕上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello,world!&#x27;</span>) <span class="comment"># &#x27;#&#x27;后面是一行注释，也能用于临时删除一行代码</span></span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>Hello,world!</code></pre><p><strong>print()函数与变量名的结合：使用+运算符触发链接两字符串功能即可</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Nice to meet you, &#x27;</span>+myName+<span class="string">&#x27;!&#x27;</span>) <span class="comment">#myName是一个变量名</span></span><br></pre></td></tr></table></figure><p>加入myName中存储字符串’Seth’，运行后↓</p><pre><code>Nice to meet you, Seth!</code></pre><h3 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h3><p>函数等待用户再见哦按上输入一些文本，并按下回车键</p><p>使用↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myName=<span class="built_in">input</span>()  <span class="comment">#变量名=input()</span></span><br></pre></td></tr></table></figure><p>input函数求值为一个字符串，也就是说<strong>总是返回一个字符串</strong>（即使用户输入51返回的也是’51’）</p><h3 id="len-函数"><a href="#len-函数" class="headerlink" title="len()函数"></a>len()函数</h3><p>可以向len函数传递一个字符串（或包含字符串的变量），然后该函数求职为一个整型值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;Hello &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27; &#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>50</code></pre><h3 id="str-、int-和float-函数"><a href="#str-、int-和float-函数" class="headerlink" title="str()、int()和float()函数"></a>str()、int()和float()函数</h3><p>str()函数求值为传入值的字符串形式</p><p>int()函数求值为传入值的整数形式</p><p>float()函数求值为传入值的浮点数形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">3.14</span>))       <span class="comment">#浮点型转化为字符串型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;1&#x27;</span>))        <span class="comment">#字符串转化为整型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">1.25</span>))       <span class="comment">#对浮点数的取整运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="string">&#x27;3.14&#x27;</span>))   <span class="comment">#字符串转化为整型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">3</span>))        <span class="comment">#整型转化为浮点型</span></span><br></pre></td></tr></table></figure><p>输出↓</p><pre><code>&#39;3.14&#39;113.143.0</code></pre><p><strong>注</strong><br>将一个不能求值为整数的值传递给int(),将会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&#x27;3.14&#x27;</span>))  <span class="comment">#错误</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">float</span>(<span class="string">&#x27;3,14&#x27;</span>)))   <span class="comment">#正确</span></span><br></pre></td></tr></table></figure><h2 id="文本和数字相等判断"><a href="#文本和数字相等判断" class="headerlink" title="文本和数字相等判断"></a>文本和数字相等判断</h2><p>整型和浮点型的值永远也不会与字符串相等<br>整型值可与浮点型值相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span>==<span class="string">&#x27;42&#x27;</span>       <span class="comment">#False</span></span><br><span class="line"><span class="number">42</span>==<span class="number">42.00</span>      <span class="comment">#True</span></span><br><span class="line"><span class="number">42.0</span>==<span class="number">0042.000</span> <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h1 id="python控制流"><a href="#python控制流" class="headerlink" title="python控制流"></a>python控制流</h1><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>“布尔”数据类型只有两种值：True，False（首字母必须大写）<br>布尔值可用在表达式中，也可保存在变量中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam=<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>True</code></pre><h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><p>“比较操作符”比较两个值，求值为一个布尔值</p><table><thead><tr><th align="center">操作符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr></tbody></table><h2 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h2><p><strong>and：一否则否</strong></p><table><thead><tr><th align="center">表达式</th><th align="center">求值为</th></tr></thead><tbody><tr><td align="center">True and True</td><td align="center">True</td></tr><tr><td align="center">True and False</td><td align="center">Fasle</td></tr><tr><td align="center">False and True</td><td align="center">False</td></tr><tr><td align="center">False and False</td><td align="center">False</td></tr></tbody></table><p><strong>or:一真则真</strong></p><table><thead><tr><th align="center">表达式</th><th align="center">求值为</th></tr></thead><tbody><tr><td align="center">True or True</td><td align="center">True</td></tr><tr><td align="center">True or False</td><td align="center">True</td></tr><tr><td align="center">False or True</td><td align="center">True</td></tr><tr><td align="center">False or False</td><td align="center">False</td></tr></tbody></table><p><strong>not：相反</strong></p><table><thead><tr><th align="center">表达式</th><th align="center">求值为</th></tr></thead><tbody><tr><td align="center">not True</td><td align="center">False</td></tr><tr><td align="center">not False</td><td align="center">True</td></tr></tbody></table><h2 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>若条件为真，则执行子句中的代码</p><p>包含以下部分；</p><ul><li>if关键字</li><li>条件</li><li><font color=red>冒号：</font></li><li>在下一行开始，缩进的代码块（成为if子句）</li></ul><p>一个小栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> name==<span class="string">&#x27;SYolin&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hi!,SYolin!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="else语句"><a href="#else语句" class="headerlink" title="else语句"></a>else语句</h3><p>跟在if语句之后，若if条件为False，则执行else子句</p><p>包含以下部分：</p><ul><li>else关键字</li><li>冒号：</li><li>在下一行开始，缩进的代码块（称为if子句）</li></ul><p>再来个小栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> name==<span class="string">&#x27;SYolin&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hi!,SYolin!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hi,stranger!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="elif语句"><a href="#elif语句" class="headerlink" title="elif语句"></a>elif语句</h3><p>表达“否则如果”的含义，提供另一个条件，尽在前面的条件为False时才检查该条件</p><p>包含以下部分：</p><ul><li>elif关键字</li><li>条件</li><li>冒号：</li><li>在下一行开始，缩进的代码块（称为elif子句）</li></ul><p><strong>elif语句的次序很重要，一旦找到一个True的条件，剩余的子句就会自动跳过</strong><br>所以应使使下面的elif条件是上面的范围更小的条件</p><h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><p>可以让一个代码块在条件的为True前提下，一遍又一遍地执行</p><p>包含以下部分：</p><ul><li>关键字</li><li>条件</li><li>冒号：</li><li>在下一行开始，缩进的代码块（称为while子句）</li></ul><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>跳出当前循环</p><h3 id="for循环和range函数"><a href="#for循环和range函数" class="headerlink" title="for循环和range函数"></a>for循环和range函数</h3><p>用于让一个代码块执行固定的次数</p><p><strong>附：“类真”和“类假”</strong><br>在用于条件时，0、0.0和’ ‘（空字符串）被认为是False,其他值被认为是True。</p><p>先来个for语句栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>Hello,worldHello,worldHello,worldHello,worldHello,world</code></pre><p>像for i in range(5)这样，总是包含以下部分：</p><ul><li>for关键字</li><li><font color=red>一个变量名</font></li><li><font color=red>in 关键字</font></li><li>调用range()的方法，最多传入3个参数</li><li>冒号</li><li>从下一行开始，缩进的代码块（称为for子句）</li></ul><p><strong>等价的while循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,world!&#x27;</span>)</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><p>可最多传三个参数<br>range(开始，停止，步长参数)</p><p>举个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>02468</code></pre><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>python程序可以调用一组基本的函数，称为“内建函数”<br>python也包括一组模块，称为“标准库”每个模块都是一个python程序，包含一组相关的函数。<br>例如：<br>math模块有数学相关的函数<br>random模块有随机数相关的函数</p><p>在开始使用一个模块函数之前，必须用import语句导入该模块<br>import语句包含以下部分：</p><ul><li>import关键字</li><li>模块的名称</li><li>可选的更多模块名称，之间用逗号隔开<br>在导入一个函数后，可以使用该模块中所有函数</li></ul><p>格式</p><pre><code>模块名.函数名()   # 表示在模块中寻找该函数</code></pre><p>举个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>41841</code></pre><h2 id="用sys-exit-提前结束程序"><a href="#用sys-exit-提前结束程序" class="headerlink" title="用sys.exit()提前结束程序"></a>用sys.exit()提前结束程序</h2><p>必须先导入sys模块</p><pre><code>import sys</code></pre><p>通过调用</p><pre><code>sys.exit()</code></pre><p>使程序提前终止</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello,world!&#x27;</span>)</span><br><span class="line">fun()</span><br><span class="line">fun()</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>Hello,world!Hello,world!Hello,world!</code></pre><p>一个自定义函数包含以下部分：</p><ul><li>def语句和参数（定义函数）</li><li>冒号</li><li>下一行缩进的函数体</li><li>可能有return关键字+表达式</li><li>函数调用</li></ul><p><strong>注：</strong></p><p>表达式是值和操作符的组合。函数调用可以用在表达式中，因为他求值为它的返回值 </p><h2 id="全局变量可以在局部作用域中读取"><a href="#全局变量可以在局部作用域中读取" class="headerlink" title="全局变量可以在局部作用域中读取"></a>全局变量可以在局部作用域中读取</h2><p>先举个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(eggs)</span><br><span class="line">eggs=<span class="number">42</span></span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(eggs)</span><br></pre></td></tr></table></figure><p>运行↓</p><pre><code>4242</code></pre><p>在fun函数中没有变量名eggs，也没有代码为eggs赋值<br>因此调用fun函数时，默认对全局变量eggs的引用</p><h2 id="global语句"><a href="#global语句" class="headerlink" title="global语句"></a>global语句</h2><p>如果需要在一个函数内修改全局变量，就使用global语句</p><pre><code>global eggs </code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>考虑下面一种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>/num</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>运行结果是这样的</p><pre><code>21.03.5*报错balabalabala*</code></pre><p>原因显而易见，当函数试图除以0时，就会触发ZeroDivisionError</p><p>错误可以由<font color=red>try</font>和<font color=red>except</font>语句来处理。<br><strong>把那些可能出错的语句放在try子句中，如果错误发生，程序执行就转到下面的except子句开始处，可以提醒用户。</strong><br><em>（和if、else条件句原理有点像）</em></p><p>改善上面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span>/num</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error:Invalid argument&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>运行如下</p><pre><code>21.03.5Error:Invalid argumentNone 42.0</code></pre><p><strong>关于None的输出：</strong><br>　　先执行fun(0)时，触发了except子句，打印出Error:Invalid argument，而后执行print(fun(0))时就等价于print(print(‘Error:Invalid argument’)),而print函数的返回值是None，因此主函数打印出None。</p><p><font color=red><strong>注</strong></font><br>　　在函数调用的try语句块中，发生的所有错误都会被捕捉，而一旦跳到except子句的代码，就不会回到try子句中，它会照常继续向下进行</p><p>来个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>/num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error:Invalid argument&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(fun(<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(fun(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(fun(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(fun(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error:Invalid argument&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行就是这样了↓</p><pre><code>21.03.5Error:Invalid argument #print函数内部的的函数错误也能被try捕捉到</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】列表</title>
      <link href="/2021/12/24/python%E5%88%97%E8%A1%A8/"/>
      <url>/2021/12/24/python%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="列表数据类型"><a href="#列表数据类型" class="headerlink" title="列表数据类型"></a>列表数据类型</h1><p>“列表”是一个值，它包含多个同种或不同种值构成的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]                             <span class="comment"># 这是一个全是整型列表</span></span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;bat&#x27;</span>,<span class="string">&#x27;rat&#x27;</span>,<span class="string">&#x27;elephant&#x27;</span>]      <span class="comment"># 这是一个全是字符串型列表</span></span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>,<span class="number">3.1415</span>,<span class="literal">True</span>,<span class="literal">None</span>,<span class="number">42</span>]       <span class="comment"># 这也是一个五花八门的列表</span></span><br><span class="line">spam=[<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;bat&#x27;</span>,<span class="string">&#x27;rat&#x27;</span>,<span class="string">&#x27;elephant&#x27;</span>] <span class="comment"># 将这个列表“值”赋给变量spam</span></span><br><span class="line">template=[]                         <span class="comment"># 这是一个空列表</span></span><br></pre></td></tr></table></figure><h2 id="用下标取得列表值"><a href="#用下标取得列表值" class="headerlink" title="用下标取得列表值"></a>用下标取得列表值</h2><p>和C++的数组下标相似，下标从<font color=red>0</font>开始到<font color=red>“列表值个数-1”</font>分别对应列表的每个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="string">&#x27;hello&#x27;</span>,<span class="number">3.1415</span>,<span class="literal">True</span>,<span class="literal">None</span>,<span class="number">42</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><pre><code>hello3.1415TrueNone42</code></pre><h2 id="负数下标"><a href="#负数下标" class="headerlink" title="负数下标"></a>负数下标</h2><p>负数也可做列表下标，整数-1指列表倒数第一个值，以此类推。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;bat&#x27;</span>,<span class="string">&#x27;rat&#x27;</span>,<span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(spam[-<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>elephantrat</code></pre><h2 id="利用切片取得子列表"><a href="#利用切片取得子列表" class="headerlink" title="利用切片取得子列表"></a>利用切片取得子列表</h2><p>“切片”可以从列表中取得多个值，<strong>结果是一个新列表</strong></p><p>切片形式:</p><ul><li><p>两个整数</p></li><li><p>第一个整数为切片开始处下标，第二个整数为切片结束处下标</p></li><li><p>切片<strong>从包括第一个下标值</strong>向上增长，直至第二个下标值，<strong>但不包括它</strong></p><pre><code>  spam[1:4]</code></pre></li></ul><p>举个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>[0,1]</code></pre><p><strong>切片快捷方法</strong></p><p>可以省略切片第一个或第二个下标：</p><ul><li><p>省略第一个下标相当于使用0</p></li><li><p>省略第二个下标相当于使用列表的长度</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[:])</span><br><span class="line"><span class="built_in">print</span>(spam[:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><pre><code>[1,2,3,4][1,2,3][2,3,4]</code></pre><h2 id="用len-函数获取列表长度"><a href="#用len-函数获取列表长度" class="headerlink" title="用len()函数获取列表长度"></a>用len()函数获取列表长度</h2><p>直接一个栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(spam))</span><br></pre></td></tr></table></figure><pre><code>4</code></pre><h2 id="列表连接和列表复制"><a href="#列表连接和列表复制" class="headerlink" title="列表连接和列表复制"></a>列表连接和列表复制</h2><p><strong>+操作符可以连接两个列表，得到一个新列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">t=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a+t)</span><br></pre></td></tr></table></figure><pre><code>[1,2,3,4,1,2,3,4]</code></pre><p>*<strong>操作符可以作用于一个列表和一个整数，实现列表的复制，得到一个新列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(spam*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code> [1,2,3,1,2,3,1,2,3]</code></pre><h2 id="用del语句从列表中删除值"><a href="#用del语句从列表中删除值" class="headerlink" title="用del语句从列表中删除值"></a>用del语句从列表中删除值</h2><p>del语句将删除列表中下标处的值，被删除的值的后面的所有值，<strong>都将向前移动一位</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">del</span> spam[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(spam[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(spam)</span><br></pre></td></tr></table></figure><pre><code>34[1,2,4,5]</code></pre><p><strong>del语句几乎总用于删除列表中的值</strong></p><h1 id="使用列表"><a href="#使用列表" class="headerlink" title="使用列表"></a>使用列表</h1><h2 id="for循环遍历列表方法"><a href="#for循环遍历列表方法" class="headerlink" title="for循环遍历列表方法"></a>for循环遍历列表方法</h2><p>1.在关键字in后输入列表名，变量i迭代列表的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> someList:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>abcd</code></pre><p>输出的是i对应的每个值，而不是列表</p><p>2.在关键字in后使用 **range(len(someList))**，变量i迭代列表的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(someList)):</span><br><span class="line">    <span class="built_in">print</span>(someList[i])</span><br></pre></td></tr></table></figure><pre><code>abcd</code></pre><h2 id="in和not-in操作符"><a href="#in和not-in操作符" class="headerlink" title="in和not in操作符"></a>in和not in操作符</h2><p>利用in和not in操作符可以确定一个值是否在列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> someList)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> someList)</span><br></pre></td></tr></table></figure><pre><code>TrueFalse</code></pre><h2 id="多重赋值技巧"><a href="#多重赋值技巧" class="headerlink" title="多重赋值技巧"></a>多重赋值技巧</h2><p>多重赋值技巧是一种快捷方式，在一行代码中，<strong>用列表的值给多个变量赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a,b,c,d,e=someList</span><br><span class="line"><span class="built_in">print</span>(a,b,c,d,e)</span><br></pre></td></tr></table></figure><pre><code>1,2,3,4,5</code></pre><p><strong>变量的数目和列表的长度必须严格相等，否则python将给出ValueError</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a,b,c,d,e,f=someList   <span class="comment">#报错</span></span><br><span class="line">a,b,c=someList         <span class="comment">#报错</span></span><br></pre></td></tr></table></figure><h2 id="处理列表的方法"><a href="#处理列表的方法" class="headerlink" title="处理列表的方法"></a>处理列表的<strong>方法</strong></h2><h3 id="index-方法列表中查找值"><a href="#index-方法列表中查找值" class="headerlink" title="index()方法列表中查找值"></a>index()方法列表中查找值</h3><ul><li>列表值有一个index()方法，可以<strong>传入一个值</strong>。</li><li>如果该值存在于列表中，就<strong>返回它的下标</strong>。<br>（如果列表中有重复的值，就返回它<strong>第一次出现</strong>的下标）</li><li>如果该值不在列表中，python就报ValueError</li></ul><p>使用</p><pre><code>列表名.index(待查值)</code></pre><p>来个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(someList.index(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(someList.index(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(someList.index(<span class="number">4</span> <span class="number">4</span> <span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>02*报错*</code></pre><h3 id="append-和insert-方法在列表中添加值"><a href="#append-和insert-方法在列表中添加值" class="headerlink" title="append()和insert()方法在列表中添加值"></a>append()和insert()方法在列表中添加值</h3><p><strong>append()方法调用，将参数添加到列表末尾</strong></p><pre><code>列表名.append(新值)</code></pre><p><strong>insert()方法可以在列表任意下标处添加一个值</strong></p><pre><code>列表名.insert(新值下标,新值)</code></pre><p>举个栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">someList.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(someList)</span><br><span class="line">someList.insert(<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(someList)</span><br></pre></td></tr></table></figure><pre><code>[1,2,3,4,5,6][1,7,2,3,4,5,6]</code></pre><p><strong>注</strong></p><ul><li>append()和insert()返回值都为None</li><li>该方法属于单个数据类型，只是列表方法，不能在其他值调用，否则会报错</li></ul><h3 id="remove-方法从列表中删除值"><a href="#remove-方法从列表中删除值" class="headerlink" title="remove()方法从列表中删除值"></a>remove()方法从列表中删除值</h3><p><strong>给remove()方法传入一个值，他将从被调用的列表中删除</strong></p><pre><code>列表名.remove(删除值)</code></pre><p>试图删除一个列表中不存在的值会报错</p><p>举个栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">someList.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(someList)</span><br></pre></td></tr></table></figure><pre><code>[1,2,4]</code></pre><h3 id="sort-方法将列表的值排序"><a href="#sort-方法将列表的值排序" class="headerlink" title="sort()方法将列表的值排序"></a>sort()方法将列表的值排序</h3><ul><li>数值的列表或字符串的列表，能用sort()方法排序</li><li>指定reverse关键字参数为True，让sort()按逆序排序</li></ul><p>使用</p><pre><code>列表名.sort()               #正序排序列表名.sort(reverse=True)   #逆序排序</code></pre><p><strong>强烈注意三件事：</strong></p><ol><li>sort()方法当场对列表排序（不要写出someList=someList.sort()试图记录其返回值）</li><li>不能对既有数字又有字符串值的列表排序（因为Python也不会啊）</li><li>sort()对字符串排序时，使用<strong>ASCII字符顺序</strong><br>这意味着<strong>大写字母排在小写字母前面</strong>，因此在排序是a永远在Z后面</li></ol><p>上栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">someList.sort()</span><br><span class="line"><span class="built_in">print</span>(someList)</span><br><span class="line">someList.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(someList)</span><br></pre></td></tr></table></figure><pre><code>[1,2,3,4,5,6][6,5,4,3,2,1]</code></pre><p>再来个字符串的栗子↓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">someList=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">someList.sort()</span><br><span class="line"><span class="built_in">print</span>(sort)</span><br></pre></td></tr></table></figure><pre><code>[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</code></pre><h3 id="copy模块实现列表的拷贝"><a href="#copy模块实现列表的拷贝" class="headerlink" title="copy模块实现列表的拷贝"></a>copy模块实现列表的拷贝</h3><p>分析以下程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">cheese=spam </span><br><span class="line">cheese[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"><span class="built_in">print</span>(cheese)</span><br></pre></td></tr></table></figure><pre><code>[1,1,3,4,5][1,1,3,4,5]</code></pre><p>分析</p><pre><code>cheese=spam  </code></pre><p>　　这样将列表赋给一个变量时，只是将列表的“引用”（地址？）赋给了该变量，当改变该变量对应的列表时，原先的列表也会改动。</p><p>如果希望修改新的变量对应的列表，而不影响原来的列表，即实现<strong>列表的先拷贝再修改</strong></p><p><strong>调用copy模块中的copy()和deepcopy()函数</strong><br><strong>1.copy.copy():</strong><br>  用来复制列表或字典这样的可变值，而不是复制引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spam=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">cheese=copy.copy(spam) </span><br><span class="line">cheese[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"><span class="built_in">print</span>(cheese)</span><br></pre></td></tr></table></figure><pre><code>[1,2,3,4,5] # spam列表没有改变[1,1,3,4,5]</code></pre><p><strong>2.copy.deecopy():</strong><br>  如果要拷贝的列表中包含列表，就用copy.deecopy()函数代替。</p><h1 id="类似列表类型：字符串和元组"><a href="#类似列表类型：字符串和元组" class="headerlink" title="类似列表类型：字符串和元组"></a>类似列表类型：字符串和元组</h1><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul><li><p>字符串可被看作“单个文本字符组成”的列表<br>很多操作对于列表的操作都可以用于字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&#x27;SYolin&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>])     <span class="comment">#通过下标取值</span></span><br><span class="line"><span class="built_in">print</span>(name[-<span class="number">2</span>])    <span class="comment">#通过下标取值（负数）</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>:<span class="number">2</span>])   <span class="comment">#切片获得新串</span></span><br><span class="line"><span class="built_in">print</span>(Yo <span class="keyword">in</span> name)  <span class="comment">#in,not in操作符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name[<span class="number">0</span>:<span class="number">2</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***&#x27;</span>+i+<span class="string">&#x27;***&#x27;</span>) <span class="comment">#用于for循环遍历</span></span><br></pre></td></tr></table></figure><p>  S<br>  i<br>  SY<br>  True<br>  <em><strong>S</strong></em><br>  <em><strong>Y</strong></em></p></li><li><p>字符串属于“不可变”数据类型，无法用赋值改变内部字符</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sententce=<span class="string">&#x27;What the surprise!&#x27;</span></span><br><span class="line">sentence[<span class="number">6</span>]=<span class="string">&#x27;a&#x27;</span>     <span class="comment">#报错</span></span><br></pre></td></tr></table></figure><p>“改变”一个字符串的正确方法，是使用<strong>切片和连接</strong><br>（for循环也无法改变单个元素）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">&#x27;What the surprise!&#x27;</span></span><br><span class="line">ans=sentence[:<span class="number">5</span>]+<span class="string">&#x27;a&#x27;</span>+sentence[<span class="number">8</span>:]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><pre><code>What a surprise!</code></pre><h2 id="元组数据类型"><a href="#元组数据类型" class="headerlink" title="元组数据类型"></a>元组数据类型</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>除了两个方面，元组和列表一模一样</p><ol><li>元组输入时用(),而不是[]</li><li>元组像字符串一样，是不可变得。元组不能让它们的值被修改、添加或删除</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) <span class="comment">#这是一个元组</span></span><br></pre></td></tr></table></figure><p>如果元组中只有一个值，可以在括号后面跟一个逗号，表明这种情况。否则python将认为，你只是在一个普通的()中输了一个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam=(<span class="number">1</span>,) <span class="comment">#这是一个只有一个值的元组</span></span><br></pre></td></tr></table></figure><p><strong>你可以用元组告诉所有读代码的人，你不打算读这个序列的值</strong></p><h3 id="用someList-和tuple-函数实现元组和列表的转换"><a href="#用someList-和tuple-函数实现元组和列表的转换" class="headerlink" title="用someList()和tuple()函数实现元组和列表的转换"></a>用someList()和tuple()函数实现元组和列表的转换</h3><p>直接上一个栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">someList=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">spam=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>(spam)      <span class="comment"># 元组转换为列表（实现可修改）</span></span><br><span class="line"><span class="built_in">print</span>(spam)</span><br><span class="line"><span class="built_in">tuple</span>(someList) <span class="comment"># 列表转换为元组（实现不可改）</span></span><br><span class="line"><span class="built_in">print</span>(someList)  </span><br></pre></td></tr></table></figure><pre><code>[1,2,3,4,5](&#39;a&#39;,&#39;b&#39;)</code></pre><h1 id="附：Python中代码跨行规则"><a href="#附：Python中代码跨行规则" class="headerlink" title="附：Python中代码跨行规则"></a>附：Python中代码跨行规则</h1><ul><li>列表中的值可以跨越几行，缩进并不重要，Python知道，没有看到“]”，列表就没结束</li></ul><p>比如说  </p><pre><code>someList=[1,2,34　　　　　　　　5]    # 没有问题的列表</code></pre><ul><li>可以在行末使用续行字符\，将一条指令写成多行。可以把\看成“这条指令在下一行继续”</li></ul><p>比如说：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;My name is &#x27;</span>+\</span><br><span class="line">      <span class="string">&#x27;SYolin&#x27;</span>)           <span class="comment">#增强可读性</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】小知识点总结</title>
      <link href="/2021/12/24/C++%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2021/12/24/C++%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本数据类型与运算符"><a href="#一、基本数据类型与运算符" class="headerlink" title="一、基本数据类型与运算符"></a>一、基本数据类型与运算符</h1><h2 id="1-字符常量与字符串常量"><a href="#1-字符常量与字符串常量" class="headerlink" title="1.字符常量与字符串常量"></a>1.字符常量与字符串常量</h2><p><img src="https://s2.ax1x.com/2020/01/16/ljh74I.png" alt="ljh74I.png"><br><font size=3>字符型常量和字符串常量的区别?</font></p><p>1)形式上:</p><p>字符常量是单引号引起的一个字符</p><p>字符串常量是双引号引起的若干个字符</p><p>2)含义上:</p><p>字符常量相当于一个整形值(ASCII值),可以参加表达式运算</p><p>字符串常量代表一个地址值(该字符串在内存中存放位置)</p><p>3)占内存大小</p><p>字符常量只占一个字节</p><p>字符串常量占若干个字节(至少一个字符结束标志)</p><h2 id="2-数值常量的表示"><a href="#2-数值常量的表示" class="headerlink" title="2.数值常量的表示"></a>2.数值常量的表示</h2><p><font size=3><strong>（1）整型常量</strong></font></p><p>十进制：由0~9组成，第一个数字不能为0</p><p>八进制：以0开头</p><p>十六进制：以0x（或0X）开头</p><p><font size=3><strong>（2）实型常量</strong></font></p><p>实型常量就是浮点数，分为<strong>十进制小数形式</strong>和<strong>指数形式</strong>两种。</p><p><font size=2><em><strong>小数形式</strong></em></font></p><p>一般由整数部分和小数部分组成，也可以省略其中一部分</p><p>如：”3.“==”3.0“　　　　　”.1415“==”0.1415“</p><p><font size=2><em><strong>指数形式</strong></em></font></p><p>&lt;数符&gt;数字部分E指数部分</p><p>如：0.31415E1==0.31415*10^1</p><p><strong>注：</strong></p><ol><li>不论把实型数写成小数形式还是指数形式，在内存中它们总是以指数形式存储。</li><li>所谓规范化的指数形式，数字部分必须小于1，同时小数点后面第一个数字必须是一个非0数字</li></ol><h2 id="3-数据类型与所占空间大小"><a href="#3-数据类型与所占空间大小" class="headerlink" title="3.数据类型与所占空间大小"></a>3.数据类型与所占空间大小</h2><table><thead><tr><th align="center">名称</th><th align="center">实例</th><th align="center">字节数/B</th></tr></thead><tbody><tr><td align="center">整型</td><td align="center">0</td><td align="center">4</td></tr><tr><td align="center">浮点型</td><td align="center">0.0</td><td align="center">8</td></tr><tr><td align="center">字符型</td><td align="center">‘0’</td><td align="center">1</td></tr><tr><td align="center">字符串型</td><td align="center">“0”</td><td align="center">2</td></tr></tbody></table><p><strong>验证一下</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a=<span class="number">0</span>; </span><br><span class="line">  <span class="keyword">double</span> c=<span class="number">0.0</span>; </span><br><span class="line">  <span class="keyword">char</span> b=<span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">  <span class="keyword">char</span> d[]=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">  cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(a)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(c)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(b)&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(d); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><pre><code>4812</code></pre><h2 id="4-自增自减，膜运算，逗号表达式"><a href="#4-自增自减，膜运算，逗号表达式" class="headerlink" title="4.自增自减，膜运算，逗号表达式"></a>4.自增自减，膜运算，逗号表达式</h2><p><img src="https://s2.ax1x.com/2020/01/16/ljTTpR.png" alt="ljTTpR.png"></p><ol><li><p>++、–运算符操作数必须为变量，不能是表达式</p></li><li><p>%运算符（模运算）操作数必须是整型，结果也为整型数</p></li><li><p>逗号表达式，依次计算，整体的值为最后结果</p></li></ol><p>先赋值b＝3，所以b的值是3，再计算b+1，b+2，由于没有再进行赋值运算，所以b的值还是3，不过整体表达式的值是最后的值。你可以这样测试 a＝（b＝3,b+1,b+2）；你会发现输出的a是5</p><h2 id="5-i-j-2"><a href="#5-i-j-2" class="headerlink" title="5.i+=j+=2"></a>5.i+=j+=2</h2><p>程序片段如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>; </span><br><span class="line">  i+=j+=<span class="number">2</span>;<span class="comment">//i=i+j+2</span></span><br><span class="line">  cout&lt;&lt;i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><pre><code>4</code></pre><p><em>从左向右计算</em></p><p>i=i+j+=2</p><p>j=j+2</p><p>i=i+j+2</p><h1 id="二、for函数的三个参数"><a href="#二、for函数的三个参数" class="headerlink" title="二、for函数的三个参数"></a>二、for函数的三个参数</h1><p><img src="https://s2.ax1x.com/2020/01/16/ljHTL6.png" alt="ljHTL6.png"><br>代码运行一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; </span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>;i++&lt;<span class="number">4</span>;);</span><br><span class="line">  cout&lt;&lt;i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>5</code></pre><p>第三条语句可以省略</p><p>因为第二条语句中含有变量i的自增变化</p><h1 id="三、数组的初始化"><a href="#三、数组的初始化" class="headerlink" title="三、数组的初始化"></a>三、数组的初始化</h1><p><font size=3><strong>一维数组</strong></font></p><p>一维数组的初始化应放在花括号内，一般称为初始化列表。</p><p><strong>说明</strong></p><ol><li><p>花括号里的元素值按位置一次赋给每个元素</p></li><li><p>当定义数组是没有给出数组的大小，但给出了初始化列表，那么数组的长度就由表中元素的个数来确定。</p><p> int a[]={‘1’,’2’,’3’}</p></li><li><p>当定义数组时给出了具体长度，那么在初始化时不允许列表中的元素个数超出指定的长度</p></li><li><p>当定义数组时给出了具体长度，在初始化时允许列表中的元素个数小于定义的大小，而剩余的元素将被初始化为0.</p></li></ol><p><font size=3><strong>二维数组</strong></font></p><p>初始化二维数组时，可以不给出第一维（行）大小</p><p>定义二维数组为形参时，可以不给出第一维（行）大小，但必须给出第二维（列）大小</p><p><font size=3><strong>字符数组</strong></font></p><p>1.利用字符常量进行初始化</p><pre><code>char c[4]=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;&#125;;   // 全部初始化char c[4]=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;   // 部分初始化，c[3]=&#39;\0&#39;</code></pre><p>2.利用字符串进行初始化</p><pre><code>char c[]=&#123;&quot;SYolin&quot;&#125;;   //字符串初始化char c[]=&quot;SYolin&quot;;     //或者去掉&#123;&#125;</code></pre><p><strong>特别注意</strong></p><p>在用字符串赋初值是，字符数组定义的大小至少要比字符串的长度多占1B，用于编译系统放置’\0’</p><pre><code>char[6]=&quot;SYolin&quot;;     //错误！用于初始化的元素超过了6！</code></pre><p><img src="https://s2.ax1x.com/2020/01/16/ljXu34.png" alt="ljXu34.png"></p><p>答案：B</p><h1 id="四、动态开辟"><a href="#四、动态开辟" class="headerlink" title="四、动态开辟"></a>四、动态开辟</h1><p><strong>特点：</strong>开辟出的空间没有名字——&gt;以指针为载体</p><pre><code>int num;char *p=new char[num];   //动态开辟数组delete []char;          //回收数组</code></pre><p><strong>注意：</strong>动态开辟不能初始化</p><pre><code>int *p= new int[10]=&#123;0&#125;;         //错误！</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/24/hello-world/"/>
      <url>/2021/12/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【离散数学】关系</title>
      <link href="/2020/04/03/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A62/"/>
      <url>/2020/04/03/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A62/</url>
      
        <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><ul><li><strong>序偶：</strong> 两个元素a、b有序地放在一起，称为一个有序对或序偶，记以(a,b)。</li><li><strong>序偶的特点：</strong> 两个有序对(a,b)和(c,d)相等当且仅当a=c，b=d<br>$(𝑎_1,𝑎_2,⋯,𝑎_𝑛)$:n元有序组<h2 id="笛卡尔乘积"><a href="#笛卡尔乘积" class="headerlink" title="笛卡尔乘积"></a>笛卡尔乘积</h2>设A、B是两个集合，所有有序对(x,y)做成的集合(其中x$\in$A,y$\in$B)，称为A、B的笛卡儿积。<br>A$\times$B={(x,y)|x$\in$A且y$\in$B}<br><strong>例：</strong> A={a,b,c}, B={1,2} $\rightarrow$A$\times$B=={(a,1),(a,2),(b,1),(b,2),(c,1),(c,2)}</li></ul><p><strong>性质</strong><br>|A$\times$B|=|A|$\times$|B|；<br>笛卡儿积运算不满足交换律，即  A$\times$B$\not=$B$\times$A；<br>对任意集合A，有A$\times$$\varnothing$=$\varnothing$，$\varnothing$$\times$A=$\varnothing$</p><h1 id="关系基本概念"><a href="#关系基本概念" class="headerlink" title="关系基本概念"></a>关系基本概念</h1><ul><li><strong>定义:</strong> 给定任意集合A和B，若R$\subseteq$A$\times$B，则称非空集合R为从A到B的二元关系。<br>关系是一个集合，是序偶的集合。</li><li><strong>二元关系：</strong> A=B时，称R为A上的二元关系</li><li>表示：<ul><li>若(a,b)$\in$R，称a与b有关系R$\Rightarrow$aRb</li><li>若(a,b)$\notin$R，称a与b没有关系R$\Rightarrow$aR’b</li></ul></li><li>三个特殊关系：<ul><li>若R=$\varnothing$，则称R为A到B上<strong>空关系</strong></li><li>若R=A$\times$B，称R为A到B上<strong>全关系</strong> $U_A$</li><li>称R={(x,x)|x$\in$A}为A上的<strong>恒等关系</strong> $I_A$</li></ul></li><li><strong>定义域：</strong> S中有序偶的第一元素组成的集合</li><li><strong>值域：</strong> S中有序偶的第二元素组成的集合<h1 id="关系的表示方法"><a href="#关系的表示方法" class="headerlink" title="关系的表示方法"></a>关系的表示方法</h1><h2 id="集合法"><a href="#集合法" class="headerlink" title="集合法"></a>集合法</h2><h3 id="列举法"><a href="#列举法" class="headerlink" title="列举法"></a>列举法</h3></li></ul><p><strong>例</strong>：“对号关系”<br>R={ (王一, 1), (李二, 2), (丁三, 3) } </p><h3 id="描述法"><a href="#描述法" class="headerlink" title="描述法"></a>描述法</h3><p><strong>例</strong>“对号关系” R的描述法表示 ：<br>A={ 王一,李二,丁三 }， B={ 1, 2, 3, 4 }<br>R={ (a, m) | a$\in$A, m$\in$B, m是a的学号 } </p><h2 id="矩阵表示法"><a href="#矩阵表示法" class="headerlink" title="矩阵表示法"></a>矩阵表示法</h2><p>关系R可以用关系矩阵$M_R=(r_{ij})_ {m*n}$表示:<br>$r_{ij}=\left{\begin{array}{l}1,  a_iRb_j\0, a_iR’b_j\end{array}\right.$</p><h2 id="图表示法"><a href="#图表示法" class="headerlink" title="图表示法"></a>图表示法</h2><p>关系R的图表示：用小圆点表示集合A、B中的元素；若aRb，则画一条从a指向b的<strong>有向边(弧)</strong></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>设A={-2,-1,0,1},写出A上的&lt;关系，≤关系，全关系和恒等关系的关系矩阵、关系图<br>&lt;={(-2,-1),(-2,0),(-2,1),(-1,0),(-1,1),(0,1)}<br>$M_&lt;=\begin{bmatrix}0&amp;1&amp;1&amp;1\0&amp;0&amp;1&amp;1\0&amp;0&amp;0&amp;1\0&amp;0&amp;0&amp;0\end{bmatrix}\$<br>$M_\leqslant=\begin{bmatrix}1&amp;1&amp;1&amp;1\0&amp;1&amp;1&amp;1\0&amp;0&amp;1&amp;1\0&amp;0&amp;0&amp;1\end{bmatrix}\$<br>恒等关系：$M_{I_A}=\begin{bmatrix}1&amp;0&amp;0&amp;0\0&amp;1&amp;0&amp;0\0&amp;0&amp;1&amp;0\0&amp;0&amp;0&amp;0\end{bmatrix}\$<br>全关系：$U_A$=A$\times$A $M_{U_A}=\begin{bmatrix}1&amp;1&amp;1&amp;1\1&amp;1&amp;1&amp;1\1&amp;1&amp;1&amp;1\1&amp;1&amp;1&amp;1\end{bmatrix}$</p><h1 id="关系的运算"><a href="#关系的运算" class="headerlink" title="关系的运算"></a>关系的运算</h1><h2 id="关系的并、交、差、补"><a href="#关系的并、交、差、补" class="headerlink" title="关系的并、交、差、补"></a>关系的并、交、差、补</h2><p>关系是序偶(有序对)的集合，因此可以对关系进行运算。若R, S$\subseteq$A$\times$B，则<br>R∪S， R∩S，~R，R-S$\subseteq$A$\times$B</p><h2 id="复合运算"><a href="#复合运算" class="headerlink" title="复合运算"></a>复合运算</h2><p>设R是一个从X到Y的关系，S是一个从Y到Z的关系，则R和S的复合关系：<br>R$\circ$S={(x,z)|x$\in$X,z$\in$Z,至少存在一个y$\in$Y,有(x,y)$\in$R且(y,z)$\in$S}<br><strong>运算方法</strong></p><ul><li><p>画图</p><img src="https://s1.ax1x.com/2020/04/03/Ga1jYj.png" width = 40% height = 40% div align=left /></li><li><p>矩阵法：将进行复合运算的两关系用矩阵表示并$\times$乘，所得矩阵即为复合运算结果<br>例3. A={1,2,3}, B={2,3,4},  C={1,2,5} ，R={(1,2),(2,2),(3,4)},   S={(2,5),(3,1),(4,2)}，复合关系？</p><img src="https://s1.ax1x.com/2020/04/03/Ga3Q0O.png" width = 40% height = 40% div align=left /></li></ul><h2 id="复合关系"><a href="#复合关系" class="headerlink" title="复合关系"></a>复合关系</h2><p><strong>定理2.1</strong> 设R、S、T分别表示从X到Y、Y到Z、Z到U的关系，则有<br>(R$\circ$S)$\circ$T=R$\circ$(S$\circ$T)<br><strong>性质</strong></p><ul><li>$R^0=I_A$</li><li>$R^n+1=R^n$$\circ$$R$</li><li>$R^n$$\circ$$R^m=R^{n+m}$</li><li>$({R^m})^n=R^{m*n}$</li></ul><h2 id="逆关系"><a href="#逆关系" class="headerlink" title="逆关系"></a>逆关系</h2><p>关系R的逆关系记为<br>$R^{-1}$={(b,a)|(a,b)$\in$R}<br><strong>性质</strong></p><ul><li>$(R^{-1})^{-1}=R$</li><li>$(R\circ Q)^{-1}=R^{-1}\circ Q^{-1}$</li></ul><h1 id="关系的重要性质"><a href="#关系的重要性质" class="headerlink" title="关系的重要性质"></a>关系的重要性质</h1><h2 id="自反与反自反"><a href="#自反与反自反" class="headerlink" title="自反与反自反"></a>自反与反自反</h2><ul><li><p><strong>自反：</strong> 集合A的关系R，如对任意的x∈A，有(x,x)∈R，则称R是自反的。<br>$\Rightarrow$$𝐼_𝐴⊆𝑅$ <em>（不能有序偶中的某元素在整个关系的序偶中成单出现）</em></p></li><li><p><strong>反自反：</strong> 反自反：在集合A的关系R，如对任意的<br>x∈A，有(𝑥,𝑥)∉𝑅，则称R是反自反的<br>$\Rightarrow$$𝑅∩𝐼_𝐴=Φ$ <em>(一个相同的序偶都不能有)</em></p></li></ul><h2 id="对称与反对称"><a href="#对称与反对称" class="headerlink" title="对称与反对称"></a>对称与反对称</h2><ul><li><p><strong>对称：</strong> 在集合X上的关系R，如果有(x,y)∈R，必有(y,x)∈R $\Rightarrow$ $R=R^{-1}$ <em>（有(a,b)就得有(b,a)成对出现）</em></p><ul><li><p>若关系是对称的,其关系图中弧是成对的</p><img src="https://s1.ax1x.com/2020/04/03/GdC2rt.png" width = 20% height = 20% div align=left /></li><li><p>若关系是对称的，则关系矩阵是对称矩阵 </p><img src="https://s1.ax1x.com/2020/04/03/GdCgKI.png" width = 20% height = 20% div align=left /></li></ul></li><li><p><strong>反对称:</strong> 在集合X上的关系R，如果有(x,y)∈R且x≠y，必有(𝑦,𝑥)∉𝑅<br>$\Rightarrow$$𝑅∩𝑅^{−1}⊆𝐼_𝑋$ <em>（存在(a,b)而找不到(b,a)）</em></p><ul><li><p>若关系是反对称的，关系图中无成对的弧 </p><img src="https://s1.ax1x.com/2020/04/03/GdPis1.png" width = 20% height = 20% div align=left /></li><li><p>若关系是反对称的，关于主对角线对称的元素不同为1  </p><img src="https://s1.ax1x.com/2020/04/03/GdPis1.png" width = 20% height = 20% div align=left /></li></ul></li></ul><h2 id="传递"><a href="#传递" class="headerlink" title="传递"></a>传递</h2><p>在集合X上的关系R，如果有(x,y)∈R且(y,z)∈R，则必有(x,z)∈R<br>$\Rightarrow$$𝑅^2⊆𝑅$</p><h2 id="实数集合上的不同关系的性质"><a href="#实数集合上的不同关系的性质" class="headerlink" title="实数集合上的不同关系的性质"></a>实数集合上的不同关系的性质</h2><ul><li>实数集上的”=”关系:自反、<strong>对称、反对称</strong>、传递</li><li>实数集上的”≤”关系:自反，反对称，传递</li><li>实数集上的”&lt;”关系：反自反，反对称，传递</li><li>空集：自反，反自反，对称，反对称，传递</li></ul><h1 id="关系上的闭包运算"><a href="#关系上的闭包运算" class="headerlink" title="关系上的闭包运算"></a>关系上的闭包运算</h1><p>关系的闭包；使得关系满足特定性质的序偶集合</p><ul><li>自反闭包：$𝑟(𝑅)=𝑅∪𝐼_𝑋$</li><li>对称闭包：$𝑠(𝑅)=𝑅∪𝑅^{−1}$</li><li>传递闭包：$𝑡(𝑅)=⋃_{𝑖=1}^∞𝑅^𝑖$$=𝑅∪𝑅^2∪𝑅^3∪⋯$<br>若关系R为有限集合:$𝒕(𝑹)=⋃_{𝒊=𝟏}^𝒏𝑹^𝒊$<br><strong>传递闭包运算方法：求得$A$，$A^2,A^3$…当没有新的序偶出现时取并集</strong><ul><li>$A^2=A\times A$, $A^3=A^2\times A$</li><li>利用画图，求$A^n$时，从某起点（作序偶第一个元素）出发经过可走路线n次到达的终点（作序偶的第二个元素）<h1 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h1>一个在X上的关系R，如果它是自反的、对称的、传递的，则为等价关系(x,y) ∈ R $\Rightarrow$  x~y</li></ul></li><li>等价关系的关系图的特点：<br>(1) 分成一些块:<strong>等价类</strong><br>(2) 每个块内的所有元素间均有关系<img src="https://s1.ax1x.com/2020/04/04/GwF1YT.png" width = 40% height = 40% div align=left /></li></ul><h2 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h2><p>R是A上的等价关系, $\forall$a$\in$A, 可构造一个A的非空子集[a]R,称为由a生成的等价类<br> <img src="https://s1.ax1x.com/2020/04/04/GwKiuT.png" width = 40% height = 40% div align=left /></p><h2 id="商集"><a href="#商集" class="headerlink" title="商集"></a>商集</h2><p>设R为非空集合A上的等价关系，以R的所有等价类作为元素的集合，称为A关于R的<strong>商集</strong>，记以A/R。<br><img src="https://s1.ax1x.com/2020/04/04/GwutXT.png" width = 40% height = 40% div align=left /></p><h2 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h2><p>设S是一个集合，$A_1,A_2,A_3…A_n$ 是它的非空子集，如果满足条件：</p><ol><li>(完整性) $U_{i=1}^m=S$   </li><li>所有$A_i$ 间均是分离的，<br>即当$i\not= j$时，$A_i\cap A_j=\varnothing$则集合$A={A_1,A_2,⋯,A_m}$称 称为S的一个划分。</li></ol><h1 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h1><p>集合X上的关系R是自反、反对称、传递的</p><h2 id="偏序关系中的“可比”，“盖住”"><a href="#偏序关系中的“可比”，“盖住”" class="headerlink" title="偏序关系中的“可比”，“盖住”"></a>偏序关系中的“可比”，“盖住”</h2><ul><li>若a,b之间有a≤b或 b≤a,则称a、b是可比的。</li><li>若a≤b且a≠b,且不存在另一元素c满足a≤c和c≤b，则称b盖住a。</li></ul><h2 id="哈斯图"><a href="#哈斯图" class="headerlink" title="哈斯图"></a>哈斯图</h2><p>1)用小圆圈作为结点表示集合中的元素<br>2)自反性不在图中表示出来<br>3) b盖住a，则a、b用线段连接 $\Rightarrow$b在上方，a在下方</p><h2 id="偏序关系中的特殊元素"><a href="#偏序关系中的特殊元素" class="headerlink" title="偏序关系中的特殊元素"></a>偏序关系中的特殊元素</h2><h3 id="极大，极小元"><a href="#极大，极小元" class="headerlink" title="极大，极小元"></a>极大，极小元</h3><ul><li><strong>极大元：</strong> 设集合A上的偏序关系“≤”，对集合 𝐵⊆𝐴若有a∈B，且不存在其他的元素x∈B，使a≤x。</li><li><strong>极小元：</strong> 如果不存在元素y∈B，使y≤a，则称元素a为集合B的极小元。 <img src="https://s1.ax1x.com/2020/04/04/GwE4tx.png" width = 40% height = 40% div align=left /></li></ul><h3 id="最大，最小元"><a href="#最大，最小元" class="headerlink" title="最大，最小元"></a>最大，最小元</h3><ul><li><p><strong>最小元素：</strong> 若有a∈B，<strong>使得对一切x∈B</strong>，有a≤x</p></li><li><p><strong>最大元素：</strong> 若对一切x∈B，都有x≤a</p><img src="https://s1.ax1x.com/2020/04/04/GwZSaR.png" width = 40% height = 40% div align=left /></li><li><p><strong>定理：</strong> 最大(小)元最多一个。</p></li></ul><h3 id="上下（确）界"><a href="#上下（确）界" class="headerlink" title="上下（确）界"></a>上下（确）界</h3><ul><li>下界：若有a∈A，使得对一切x∈B，有a≤x</li><li>上界：若a∈A，对一切x∈B，都有x≤a</li><li>下确界：下界中的最大元素</li><li>上确界：上界中的最小元素<img src="https://s1.ax1x.com/2020/04/04/Gwee6U.png" width = 40% height = 40% div align=left /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【离散数学】图论</title>
      <link href="/2020/04/02/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A611/"/>
      <url>/2020/04/02/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A611/</url>
      
        <content type="html"><![CDATA[<h1 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h1><ul><li><p><strong>无序结点对：</strong> 结点对和次序无关  </p><pre><code>    &lt;img src=&quot;https://s1.ax1x.com/2020/04/02/GYJSYR.png&quot; width = 40% height = 40% div align=left /&gt;</code></pre></li><li><p><strong>有序结点对：</strong> 结点对和次序有关</p><img src="https://s1.ax1x.com/2020/04/02/GYJnfI.png" width = 40% height = 40% div align=left /></li><li><p><strong>邻接</strong> 邻接是点与点或者边与边之间的关系。在无向图中，如果两个点之间至少有<strong>一条边</strong>相连，则称这两个点是邻接的。同样，如果两条边有共同的顶点，则两条边也是邻接的。</p></li><li><p><strong>关联：</strong> 关联是点与边之间的关系。一个点如果是一条边的顶点之一，则称为该点与该边关联</p><img src="https://s1.ax1x.com/2020/04/02/GYYP4s.png" width = 50% height = 50% div align=left /></li><li><p><strong>悬挂点：</strong> 度数为1的点</p></li><li><p><strong>孤立点：</strong> 度数为0的点</p></li><li><p><strong>自环，自回路</strong></p><img src="https://s1.ax1x.com/2020/04/02/GYtzkQ.png" width = 50% height = 50% div align=left /></li></ul><h2 id="顶点的度"><a href="#顶点的度" class="headerlink" title="顶点的度"></a>顶点的度</h2><p>在无向图中，指与该顶点相关联的边的条数。</p><ul><li><strong>偶度顶点：</strong> 度数为偶数的顶点<br><strong>奇度顶点：</strong> 度数为奇数的顶点</li><li><strong>入度：</strong> 以结点v为终点的边数 $d_i(v)$ input<br><strong>出度：</strong> 以结点v为起点的边数 $d_o(v)$ output<br>$d(v)$=$d_i(v)$+$d_o(v)$</li><li>有向图中，某个顶点有自环，则该顶点的<strong>出度和入度分别加1</strong></li></ul><h2 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h2><ul><li><p><strong>有向图：</strong> 图中的所有边均为有向边。</p></li><li><p><strong>无向图：</strong> 图中的所有边均为无向边。</p></li><li><p><strong>多重图：</strong> 含有平行边的图</p></li><li><p><strong>简单图：</strong> 不含有自环和平行边的图</p></li><li><p><strong>有限图：</strong> 顶点集和边集均为有限集的图</p><h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2></li><li><p> <strong>子图：</strong>  图G’中的点集和边集为图G的子集（G’=&lt;V’，E‘&gt;，G=&lt;V,E&gt;且V’$\subseteq$V,E’$\subseteq$E）G’为G的子图</p></li><li><p><strong>真子图：</strong> 图G’中的点集和边集为图G的子集（G’=&lt;V’，E‘&gt;，G=&lt;V,E&gt;且V’$\subseteq$V,E’$\subset$E）G’为G的子图</p></li><li><p><strong>生成子图：</strong> 图G’中的点集与G相等，边集为G的子集（G’=&lt;V’，E‘&gt;，G=&lt;V,E&gt;且V’=V,G’$\subseteq$G）G’为G的生成子图</p><h2 id="n-m-图"><a href="#n-m-图" class="headerlink" title="(n,m)图"></a>(n,m)图</h2></li><li><p><strong>(n,m)图：</strong> 一个具有n个结点（阶）、m条边所组成的图。</p></li><li><p><strong>零图：</strong> (n,0)一个没有边的图</p></li><li><p><strong>平凡图：</strong> (1,0)只有一个点的图</p></li><li><p><strong>空图：</strong> 顶点集和边集均为空</p><h2 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h2></li><li><p><strong>无向完全图：</strong> 无向简单图G (n,m) ，如果其n个结点中的每一个均与其余n-1个结点邻接。<br>  <strong>边数m=$\frac{n(n-1)}2$</strong></p><img src="https://s1.ax1x.com/2020/04/02/GYD7ss.png" width = 20% height = 20% div align=left /></li><li><p><strong>有向完全图：</strong> 有向简单图G (n,m) ， 如果其n个结点中的每一个均与其余n-1个结点邻接。<br>  <strong>边数m=n(n-1)</strong></p><h2 id="补图"><a href="#补图" class="headerlink" title="补图"></a>补图</h2><p>G的补图是由G的所有顶点和为了使G成为完全图所需要添加的那些边所组成的图。</p></li></ul><h2 id="d次正则图"><a href="#d次正则图" class="headerlink" title="d次正则图"></a>d次正则图</h2><p>每个顶点均有相同度d的图。</p><ul><li>n阶零图是0次正则图</li><li>n个顶点的完全图是(n-1)次正则图。</li></ul><h2 id="定理-8-1"><a href="#定理-8-1" class="headerlink" title="定理 8.1"></a>定理 8.1</h2><p>设$G=（V,E）$,${\sum_{v\in V}^{}}d(v)=2|E|$</p><ul><li>度数和必为偶数</li><li>任何(n,m)图中奇度顶点必为偶数个。</li></ul><h2 id="图的表示方法"><a href="#图的表示方法" class="headerlink" title="图的表示方法"></a>图的表示方法</h2><ul><li><strong>定义描述法：</strong> 用点的集合和边的集合来表示</li><li><strong>图形表示法：</strong> 用小圆圈——顶点；线段——边</li><li><strong>矩阵表示法：</strong> 用二进制的数{0，1}表示图中点与点、点与边的关系</li></ul><h2 id="有权图"><a href="#有权图" class="headerlink" title="有权图"></a>有权图</h2><img src="https://s1.ax1x.com/2020/04/02/GtMAhV.png" width = 20% height = 20% div align=left /><ul><li><strong>权：</strong> 附在边旁说明某种信息的数据</li><li><strong>有权边(带权边)：</strong> 带有权的边</li><li><strong>有权图(带权图)：</strong> 图中的边均是有权边之图 </li></ul><h1 id="通路-回路-连通图"><a href="#通路-回路-连通图" class="headerlink" title="通路 回路 连通图"></a>通路 回路 连通图</h1><h2 id="通路"><a href="#通路" class="headerlink" title="通路"></a>通路</h2><ul><li><strong>简单通路：</strong> 若通路中的<strong>所有边互不相同</strong>称为简单通路</li><li><strong>基本通路：</strong> 若通路中的<strong>所有顶点互不相同</strong>称为基本通路。</li><li>基本通路一定是简单通路</li><li><strong>完备通路：</strong> 该通路既是简单回路，又是基本回路<h2 id="回路"><a href="#回路" class="headerlink" title="回路"></a>回路</h2></li><li><strong>基本回路：</strong> 若回路长度大于等于3，且所有顶点除了起点和终点是相同点外，没有其他相同顶点在回路中出现。<img src="https://s1.ax1x.com/2020/04/02/GYWcLD.png" width = 40% height = 40% div align=left /></li></ul><h2 id="短程"><a href="#短程" class="headerlink" title="短程"></a>短程</h2><p>短程（距离）：两个顶点间有若干条通路，必有一条长度最短（经过的边最少）</p><h2 id="定理-8-2"><a href="#定理-8-2" class="headerlink" title="定理 8.2"></a>定理 8.2</h2><p>  一个有向(n,m)图中任何基本通路长度不超过(n-1)，而任何基本回路长度均不超过n。</p><h2 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h2><h3 id="可达"><a href="#可达" class="headerlink" title="可达"></a>可达</h3><p>设$G=&lt;V,E&gt;$, P,Q是两个顶点 ，若存在一条从P到Q的通路，则称P到Q是可达的</p><h3 id="无向图连通"><a href="#无向图连通" class="headerlink" title="无向图连通"></a>无向图连通</h3><p>一个无向图G，如果它的任何两结点间均是可达的，则称图G为连通图；否则，称为非连通图。 </p><h3 id="有向图连通"><a href="#有向图连通" class="headerlink" title="有向图连通"></a>有向图连通</h3><p>一个有向连通图G，</p><ul><li><strong>弱连通：</strong> 如果忽略边的方向后其无向图是连通的</li><li><strong>单向连通：</strong> 如果其任何两点间至少存在一向是可达的</li><li><strong>强连通：</strong> 如果其任何两点间均是互相可达的<img src="https://s1.ax1x.com/2020/04/02/GYOSpD.png" width = 40% height = 40% div align=left /></li></ul><p><strong>三者关系</strong></p><ul><li>强连通一定是弱连通，一定是单向连通</li><li>单向连通一定是弱连通</li></ul><p><strong>强连通判定</strong><br>一个有向图D是强连通 $\leftrightarrow$ D中有一个回路，它至少包含每个顶点一次</p><h1 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>描述结点与结点之间的关系<br>$a=(a_{ij})<em>{n*n}$<br>$M</em>{ij}=\left{\begin{array}{l}1;v_i与v_j是邻接的\0\end{array}\right.$</p><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><ul><li>无向图的邻接矩阵是对称的</li><li>每行元素之和恰好为该顶点的度</li><li>所有元素之和等于2m<img src="https://s1.ax1x.com/2020/04/02/GYjO7n.png" width = 40% height = 40% div align=left /></li></ul><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><ul><li><p>有向图的邻接矩阵一般是不对称的</p><img src="https://s1.ax1x.com/2020/04/02/GYzCw9.png" width = 40% height = 40% div align=left /></li><li><p>求一个有向图某点的度数：入度+出度<br>将该点对应的行列布尔数相加，分别即为出度和入度的度数<br>$d_o(v_i)={\sum_{k=1}^{n}}a_{ik}$<br>$d_i(v_i)={\sum_{k=1}^{n}}a_{ki}$<br>$d(v_i)=d_o(v_i)+d_i(v_i)$</p><p>$A=\begin{bmatrix}0&amp;1&amp;0&amp;0\0&amp;0&amp;0&amp;1\0&amp;1&amp;0&amp;0\0&amp;0&amp;1&amp;0\end{bmatrix}$<br>2的度数=（0+0+0+1）+（1+0+1+0）=3</p></li></ul><h3 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h3><ul><li>若邻接矩阵的元素全为零，则对应的图是零图。</li><li>若邻接矩阵除主对角线元素为0，其他全为1,则对应的图是连通的且为简单完全图。</li></ul><h3 id="定理-8-3（矩阵相乘）"><a href="#定理-8-3（矩阵相乘）" class="headerlink" title="定理 8.3（矩阵相乘）"></a>定理 8.3（矩阵相乘）</h3><p>设邻接矩阵为A的无向简单图，则$A^k$(k=1,2,3…)的元素是连接$v_i$到$v_j$的长度为k的通路的总数，而$a_{ii}^k$为$v_i$到$v_i$长度为k的回路总数。</p><h2 id="可达矩阵"><a href="#可达矩阵" class="headerlink" title="可达矩阵"></a>可达矩阵</h2><p>$M_{ij}=\left{\begin{array}{l}1;v_i与v_j是可达的\0\end{array}\right.$</p><h3 id="连通矩阵"><a href="#连通矩阵" class="headerlink" title="连通矩阵"></a>连通矩阵</h3><p>对无向图G, n阶方阵C称为G的连通矩阵<br><img src="https://s1.ax1x.com/2020/04/02/Gt9vN9.png" width = 40% height = 40% div align=left /></p><h3 id="可达矩阵-1"><a href="#可达矩阵-1" class="headerlink" title="可达矩阵"></a>可达矩阵</h3><p>对有向图D, n阶方阵C称为可达矩阵<br><img src="https://s1.ax1x.com/2020/04/02/GtCp1x.png" width = 40% height = 40% div align=left /></p><h3 id="求可达矩阵方法"><a href="#求可达矩阵方法" class="headerlink" title="求可达矩阵方法"></a>求可达矩阵方法</h3><p><strong>法一：</strong> A为邻接矩阵 $P=A+A^2+A^3+…+A^n$<br><strong>法二：</strong> 邻接矩阵A当作关系矩阵，求连通矩阵就相当于求A的传递闭包。 $t(R)=U_{i=1}^\infty =R\cup R^2\cup R^3\cup…\cup R^n\$</p><h2 id="关联矩阵"><a href="#关联矩阵" class="headerlink" title="关联矩阵"></a>关联矩阵</h2><h3 id="无向图-1"><a href="#无向图-1" class="headerlink" title="无向图"></a>无向图</h3><p>对于无自环的无向图G，其关联矩阵$M_G=(a_{ij})<em>{n*m}$<br> $M</em>{ij}=\left{\begin{array}{l}1;v_i与e_j是关联的\0\end{array}\right.$<br> <img src="https://s1.ax1x.com/2020/04/02/GtikYd.png" width = 40% height = 40% div align=left /></p><ul><li>关联矩阵中每列包含两个1；（一个边必和两个点关联）</li><li>每行元素之和等于该顶点的度；</li><li>一行元素全为0，对应的顶点为孤立点<h3 id="有向图-1"><a href="#有向图-1" class="headerlink" title="有向图"></a>有向图</h3>$M_{ij}=\left{\begin{array}{l}1;v_i是e_j的起点\-1;v_i是e_j的终点\0\end{array}\right.$</li></ul><img src="https://s1.ax1x.com/2020/04/02/GtEiut.png" width = 40% height = 40% div align=left /><ul><li>关联矩阵中每列包含两个1；</li><li>每行中1的个数为该点的出度，-1的个数即为该点的入度</li><li>一行元素全为0，对应的顶点为孤立点</li></ul>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CET-6】词汇积累</title>
      <link href="/2020/03/20/%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87/"/>
      <url>/2020/03/20/%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Unit-1"><a href="#Unit-1" class="headerlink" title="Unit 1"></a>Unit 1</h1><h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul><li><p>   initial adj.最初的;字首的n.词首大写字母;</p></li><li><p>   primitive adj.原始的，远古的;</p></li><li><p>   privilege n.特权;优待</p></li><li><p>   preference n. 偏爱，倾向;优先权</p></li><li><p>   possessions财产;所有物 in possession of</p></li><li><p> derive vt.源于;得自;获得<br>  derive pleasure from helping others</p></li><li><p>   Occur to sb.(想法、主意在某人脑海中)突然出现</p></li><li><p>   It did not occur to me to check my insurance policy.我没想到要核对我的保险单</p></li><li><p>   reflect on/upon</p></li><li><p> liberal adj.开明的;开通的; (个人) 自由主义的<br>  Only a small minority of the mentally ill are liable to harm themselves or others.<br>  She will grow into a woman particularly liable to depression.<br>  The airline’s insurer is liable for damages to the victims’ families.<br>  liberal arts</p></li><li><p>   hint n. 暗示;线索</p></li><li><p>   signature n. 签名</p></li><li><p> distinguish区分，辨别<br>  distinguish A from B<br>  distinguish between …<br>  She disguised herself as a man so she could fight on the battlefield.<br>  in disguise伪装</p></li><li><p> dissolve溶解<br>  Heat gently until the sugar dissolves.</p></li><li><p>   specialize in 专门研究</p></li><li><p>   significant adj. 显著的</p></li><li><p>   successive 连续的</p></li><li><p> subsequent随后的<br>  the increase of population in subsequent years.</p></li><li><p>   symptom症状;征兆</p></li><li><p>   trail n.痕迹</p></li><li><p> therapy n.治疗，疗法<br>  physical therapy</p></li><li><p> trace sth (back) (to sth)追溯;追究<br>  She could trace her family tree back to the 16th century.</p></li><li><p>   composition  n.构成;合成物</p></li><li><p>   compound n. [化学]化合物;混合物;复合词</p></li><li><p> proportion n.比例，占比;部分;<br>  a proportion of</p></li><li><p> boost vt.促进;增加;支援<br>  boost the economy</p></li><li><p> discharge 解雇，准许某人离开<br>  be discharged from the military service<br>  discharge sewage</p></li><li><p>   utilize  v.利用</p></li><li><p> exert v.运用，发挥;施以影响<br>  He exerted considerable influence on the thinking of the scientific community on these \issues.<br>  Do not exert yourself unnecessarily.</p></li><li><p>   imitate v.模仿，仿效;</p></li><li><p> unstable政治，上，经济.上不稳定<br>  unsteady动作不稳<br>  be reluctant to do: be unwilling to do</p></li><li><p>   rational adj.合理的;理性的</p></li><li><p>   accordingly adv因此;于是</p></li><li><p>   nevertheless adv. conj.虽然如此;然而，不过</p></li><li><p>   therefore adv.因此</p></li><li><p>   furthermore adv.此外，而且</p></li></ul><h2 id="选词填空"><a href="#选词填空" class="headerlink" title="选词填空"></a>选词填空</h2><pre><code>方法：通读短文，确定每个空的词性标注给出单词的词性</code></pre><ul><li><p>   stem  v. 源于 stem from</p></li><li><p>   acquisition 习得  acquire名词</p></li><li><p>   permanently 永久地; 永远; 长期; 一直;</p></li><li><p>   simultaneous 同时发生(或进行)的; 同步的;</p></li><li><p>   document v. 记录</p></li><li><p>   sequentially 按顺序的</p></li><li><p>   whether…or…不论…还是</p></li><li><p>   bilingual 双语的</p></li><li><p>   asset 资产资本</p></li><li><p>   overwhelming 难以应付的</p></li><li><p> equivalent<br>  be equivalent to 相当于</p></li><li><p>   underlying  潜在的</p></li></ul><h1 id="Unit-2"><a href="#Unit-2" class="headerlink" title="Unit 2"></a>Unit 2</h1><h2 id="词汇-1"><a href="#词汇-1" class="headerlink" title="词汇"></a>词汇</h2><ul><li><p> reserve n.<br>  a nature reserve自然保护区<br>  natural /mineral resources</p></li><li><p>   dim adj.昏暗的</p></li><li><p>   minute adj.微小的，详细的;</p></li><li><p> slight adj.<br>  make a slight improvement / a slight chance</p></li><li><p> feasible adj.可行的<br>  infeasible adj.<br>  feasibility n.可行性;可能性</p></li><li><p> exchange rate汇率.<br>  exchange sth. for sth.</p></li><li><p> transfer v. (使)换乘;调动(工作) ;运动员转会<br>  transform v. 改变，使… 变形;<br>  transplant v.移植;移植器官<br>  transmit vt. 传输;传播</p></li><li><p>   weighty adj.重的;重大的;严肃的</p></li><li><p>   vague adj.模糊的;含糊的;不明确的</p></li><li><p>   excessive adj.过多的，极度的;过分的</p></li><li><p>   extensive adj.广泛的;大量的;广阔的</p></li><li><p> intensive adj.加强的;集中的<br>  intensive/extensive reading精读/泛读</p></li><li><p> exclusive adj.独有的; 排外的;专- -的n.独家新闻<br>  be exclusive of</p></li><li><p>   tension n.紧张;紧张局面</p></li><li><p>   train n.张力;拉紧;扭伤;压力</p></li><li><p>   intensity n.强度; 强烈</p></li><li><p>   ignore V.</p></li><li><p>   ignorant无知的;愚昧的adj.</p></li><li><p>   ignorance n.</p></li><li><p>   retain vt. 保留;记住</p></li><li><p> review vt./n. 回顾;检查;复审<br>  literature review文献回顾;文献综述;文献评论<br>  book review书评</p></li><li><p>   shift v.变换;改变观点;推卸(责任)</p></li><li><p> moderate adj.稳健的，温和的;适度的，中等的; 有节制的<br>  Moderate political opinions or policies are not extreme. (政见或政策)温和的</p></li><li><p>   conviction n.定罪;坚定的信仰</p></li><li><p> consent n. /v.准许，同意;<br>  give one’s consent to sth</p></li><li><p> coordination n.协调，调和<br>  in coordination with与…协作</p></li><li><p> acquaintance n.熟人;相识;<br>  have an acquaintance with someone<br>  be acquainted with sth./sb.熟悉;了解</p></li><li><p>   harmony n. harmonious adj.</p></li><li><p>   in contact with someone</p></li></ul><h2 id="选词填空-1"><a href="#选词填空-1" class="headerlink" title="选词填空"></a>选词填空</h2><ul><li><p>   Deliberately 故意的</p></li><li><p> consistent 一致<br>  be consistent with…  和…一致</p></li><li><p>   species-typical behavior 种群特有的行为</p></li><li><p>   hive n.蜂巢，蜂群. </p></li><li><p>   unicorn 独角兽，麒麟</p></li><li><p>   abstract抽象的</p></li><li><p>   immensely 非常，程度剧烈的</p></li><li><p>   take for granted. 把…当作理所当然</p></li><li><p>   Speech: 说话方式，言语</p></li></ul><h1 id="Unit-3"><a href="#Unit-3" class="headerlink" title="Unit 3"></a>Unit 3</h1><h2 id="词汇-2"><a href="#词汇-2" class="headerlink" title="词汇"></a>词汇</h2><ul><li><p>   attachment n.附件;依恋;</p></li><li><p>   in the long run从长远来看</p></li><li><p> prior adj. (时间、 顺序等)先前的;优先的<br>  prior to: before<br>  priority n.优先; 优先权set priorities</p></li><li><p> superior adj. 上级的;优秀的，出众的<br>  be superior/inferior to</p></li><li><p>   be contrary to和..相反</p></li><li><p> parallel adj.平行的;类似的，相同的<br>  be parallel to</p></li><li><p>   be confronted with: be faced with 面对</p></li><li><p>   tackle v.应付，处理(难题或局面)</p></li><li><p> inquire vt.询问;查究;问明<br>  inquire into : investigate</p></li><li><p>   consults with sb.商量</p></li><li><p>   register v.登记; (旅馆) 登记住宿</p></li><li><p>   resolve vt.决定;解决;决心要做…</p></li><li><p>   justify doing sth.</p></li><li><p>   indicate: suggest, show</p></li><li><p> reckon vt.测算，估计;认为;<br>  reckon on指望;依赖<br>  reckon with处理;对付;</p></li><li><p>   affection n.喜爱，感情;</p></li><li><p>   manually adv.手动地;用手</p></li></ul><pre><code>artificially adv.人工地;人为地;不自然地automatically adv.自动地;机械地;无意识地</code></pre><ul><li><p>   synthetically adv.综合地;合成地</p></li><li><p> inference n. 推理;推论;推断<br>  infer sth. from…..</p></li><li><p>   conference   n.会议;讨论;协商</p></li></ul><pre><code>confer v. confer with someone商议reference  n.参考，参照;涉及，提及preference n.偏爱，倾向;优先权</code></pre><ul><li><p>   be particular about :挑剔的</p></li><li><p>   figure n.身影</p></li></ul><pre><code>sketch n.素描;略图;梗概image n.影像;想象;肖像</code></pre><ul><li><p> exclusion n. .排除;排斥;驱逐<br>  exclude V.</p></li><li><p> modification n.修改，修正;改变<br>  modify V</p></li><li><p> substitution n.代替<br>  substitute A for B=replace B with A</p></li><li><p>   illustrate vt.阐明，举例说明;图解</p></li><li><p>   hint vt.暗示;示意n.暗示;线索</p></li><li><p>   constant adj.常发生的;常存在的</p></li><li><p>   sufficient adj.足够的;充分的</p></li><li><p>   adequate</p></li><li><p>   steady stable</p></li><li><p>   discipline n.学科;纪律;训练;</p></li></ul><pre><code>principle n.原理，原则principal adj.主要的;资本的n.首长;校长;丛林</code></pre><ul><li><p> confinement n.限制;<br>  be confined to</p></li><li><p>   fence n.栅栏;围墙;剑术</p></li><li><p>   mobile adj.可移动的</p></li><li><p>   drifting  adj.漂流的，飘动的</p></li></ul><h2 id="选词填空-2"><a href="#选词填空-2" class="headerlink" title="选词填空"></a>选词填空</h2><ul><li><p>   Fragile adj.脆的;易碎的</p></li><li><p>   inadequate health care匮乏的医疗保障</p></li><li><p>   inadequate  adj.不充分的，不适当的</p></li><li><p>   trivial  adj. 不重要的，琐碎的</p></li><li><p> legislature n.立法机关;立法机构<br>  legislation   n.立法;法律<br>  legislative /executive /judicial branches</p></li><li><p>   masculine adj.男性的;阳性的;男子气概的</p></li><li><p>   enlist vt. 使入伍;征募;谋取… 的赞助或帮助</p></li><li><p>   ally n.同盟国;伙伴</p></li></ul><h1 id="Unit-4"><a href="#Unit-4" class="headerlink" title="Unit 4"></a>Unit 4</h1><h2 id="词汇-3"><a href="#词汇-3" class="headerlink" title="词汇"></a>词汇</h2><ul><li><p>   exaggerate v.夸张;夸大</p></li><li><p> Overtake vt.赶上<br>  It’s dangerous to overtake on a bend.在弯道强行超车是危险的。</p></li><li><p>   precaution n.预防措施;预防</p></li><li><p> perceive V. 注意到;意识到;察觉到<br>  perceive sb/sth (as sth) 将.. 理解为;将…视为;认为</p></li><li><p> multiply v.乘;乘以;成倍增加<br>  multiple adj. multimedia, multinational</p></li><li><p>   expand v.扩展，发展(业务) expansion n.</p></li><li><p>   stretch V.    拉长;拽宽;撑大伸展;舒展</p></li><li><p>   Indispensable adj.不 可或缺的;必不可少的.</p></li><li><p>   identical adj.完全同样的;相同的; </p></li><li><p>   inevitable adj.不可避免的Unavoidable</p></li><li><p>   embrace v.抱;拥抱;欣然接受，乐意采纳(思想、建议等);信奉(宗教、信仰等);包括;包含</p></li><li><p>   tedious adj. boring; dull</p></li><li><p> dynamic adj.充满活 力的;精力充沛的;<br>  dynamic —static</p></li><li><p>   heroic  adj.英勇的;英雄的; </p></li><li><p>   diplomatic adj.外交的;策略的;圆通的</p></li><li><p>   squeeze v.挤压;捏;</p></li><li><p>   stretch V.拉长;拽宽;撑大伸展;舒展.</p></li><li><p>   leap v.跳;跳跃</p></li><li><p> exhibit vt.展览;显示/n. 展览品;展示会<br>  exhibition n.展览，显示;展览会</p></li><li><p>   exploit vt.利用…为自己谋利);剥削;压榨;运用;利用;</p></li><li><p>   obstacle n.障碍;阻碍; barrier</p></li><li><p>   offense = offence犯罪</p></li><li><p> dispose  v. 排列;布置;安排;<br>  dispose of sb/sth 1去掉;清除;销毁2击败;杀死<br>  dispose of stolen property销赃</p></li><li><p>   halt v. (使)停 止，停下n.停止;阻止;</p></li><li><p>   combat n.搏斗;打仗;战斗v. 防止;减轻;战斗;与搏斗</p></li><li><p>   overall adj. 全面的;综合的;总体的</p></li><li><p> joint adj. 联合的;共同的n. 关节;<br>  The report was a joint effort (= we worked on it together) .<br>  a joint account (= a bank account in the name of more than one person, for example a husband and wife)</p></li><li><p>   intensive adj. 短时间内集中紧张进行的;密集的;</p></li><li><p>   rigid[‘ rd3Id]死板的; 僵硬的</p></li><li><p>   harsh adj.残酷的;严酷的;严厉的;恶劣的;艰苦的</p></li><li><p> emit v.发出，射出，散发(光、热、声音、气等)<br>  emission n.</p></li><li><p>   motivate 成为…的动机;是..的原因;激励激发</p></li><li><p>   advocate v.拥护;支持;提倡n.</p></li><li><p>   convey V.表达，传递(思想、感情等);</p></li><li><p>   elaborate adj.复杂的;详尽的;精心制作的   V.详尽阐述;详细描述~ (on/upon sth)</p></li><li><p>   frustrating adj.令人懊恼的;令人沮丧的</p></li><li><p>   profitable adj. adj.有利润的;赢利的</p></li><li><p>   exploitable adj. adj.可利用的;可开发的</p></li><li><p>   misleading adj.误导的;引入歧途的</p></li></ul><h2 id="选词填空-3"><a href="#选词填空-3" class="headerlink" title="选词填空"></a>选词填空</h2><ul><li><p>   Negotiated v. 谈判;磋商;协商;</p></li><li><p>   Scenario n.设想;可能发生的情况</p></li><li><p>   confrontation n.对抗;对峙;冲突</p></li><li><p>   review v.评审 审查，检查</p></li><li><p>   Gut 非理性的；本能的</p></li><li><p>   Dismissive轻蔑的，鄙视的</p></li></ul><h1 id="Unit-5"><a href="#Unit-5" class="headerlink" title="Unit 5"></a>Unit 5</h1><h2 id="词汇-4"><a href="#词汇-4" class="headerlink" title="词汇"></a>词汇</h2><ul><li><p> Procedure n. (正常)程序，手续，步骤<br>  Making a complaint is quite a simple procedure.<br>  申诉的手续相当简单。</p></li><li><p> allowance n.津贴;补贴;<br>  a living/travel allowance生活/交通补贴</p></li><li><p> devise v.发明;设计;想出<br>  A new system has been devised to control traffic in the city.<br>  控制城市交通的新系统已经设计出来。</p></li><li><p> install v.安装;设置;建立(程序);<br>  installer n.安装工</p></li></ul><pre><code>The hotel chain has recently installed a new booking system.这家连锁旅馆最近安装了新的预订系统。</code></pre><ul><li><p> equip V. ~ yourself/sb/sth (with sth) (for sth)<br>  well-equipped research buildings设施齐全的研究大楼<br>  The course is designed to equip students for a career in nursing.<br>  此课程旨在使学生能够胜任护理工作。</p></li><li><p>   format v. 格式化;安排..的版式</p></li><li><p>   ease v. (使)宽慰;减轻;缓解</p></li><li><p> decline v. 减少; 下降(fall, decrease)谢绝;婉言拒绝<br>  The number of tourists to the resort declined by 10% last year.<br>  decline an offer/invitation 谢绝对方的主动帮助/邀请</p></li><li><p>   deprive sb/sth of sth剥夺; 使丧失;使不能享有</p></li><li><p> prospect n.可能性;希望;前景<br>  I chose to work abroad to improve my career prospects.<br>  我选择出国工作以求在事业上有更好的发展。</p></li><li><p> stake n.股本;股份v. (就某事)..打赌， 拿… 冒险;<br>  （a 20% stake in the business那家公司20%的股份）</p></li></ul><pre><code>stake in sth (在公司、计划等中的)重大利益，重大利害关系（Many young people no longer feel they have a stake in society.）（很多年轻人不再觉得他们与社会休戚相关。）at stake成败难料;得失都可能;有风险（We cannot afford to take risks when peoples&#39; lives are at stake.）（现在人命交关，不容我们有闪失。）</code></pre><ul><li><p>   provision n.提供;供给;给养</p></li><li><p> Disposal n.去掉;清除;处理<br>  V. dispose of<br>  at your/sb’s disposal任某人处理;供某人任意使用;由某人自行支配</p></li><li><p>   diverse adj.不同的;相异的;多种多样的;</p></li><li><p>   identical adj.完全同样的;相同的;</p></li><li><p>   entitle V.使享有权利;使符合资格.</p></li><li><p> be attributed to :归因于<br>  She attributes her success to hard work and a little luck.<br>  她认为她的成功来自勤劳和一点运气。</p></li><li><p> be identified with sb/sth<br>  identify yourself with sb/sth<br>  支持;与..有密 切关联</p></li><li><p> be justified (in doing sth) ( 做某事)有正当理由的<br>  She felt fully justified in asking for her money back.<br>  她认为有充分的理由要求退款。</p></li><li><p>   conventional adj.依照惯例的;遵循习俗的</p></li><li><p>   fierce adj.强烈的;猛烈的; </p></li><li><p>   strained adj.神色不宁的;紧张的;憔悴的</p></li><li><p>   insight n.洞察力;领悟;洞悉;</p></li><li><p>   sufficient adj.足够的;充足的adequate adj.</p></li><li><p>   proficient adj.熟练的;娴熟的;精通的;</p></li><li><p>   density n.密集;稠密;密度dense adj.密集的;稠密的; .</p></li><li><p>   intensity n.强度;烈度intense adj.-十分强烈的;激烈的;</p></li><li><p> prosper v.繁荣;兴旺;成功;发达<br>  prosperous adj.繁荣的;成功的; 兴旺的<br>  prosperity n.</p></li><li><p> transformation n. (彻底的)变化，改观，转变，改革;<br>  transform v.<br>  transfer v.转移，搬迁;(使)调动;转职;转学<br>  transplant v.移植</p></li><li><p>   capacity n.容量;容积;容纳能力;领悟(或理解、办事)能力</p></li><li><p>   be acquainted with: be familiar with</p></li><li><p>   enlighten v.启发;开导;阐明</p></li><li><p>   lodger n.寄宿者;租住者;房客</p></li><li><p> exhaust V.使筋疲力尽<br>  wear sb. out<br>  be exhausted : be worn out</p></li></ul><h2 id="选词填空-4"><a href="#选词填空-4" class="headerlink" title="选词填空"></a>选词填空</h2><ul><li><p> Notorious adj. 声名狼藉的;臭名昭著的<br>  notorious (for sth/for doing sth)<br>  The country is notorious for its appalling prison conditions.<br>  这个国家因监狱状况恶劣而臭名远扬。</p></li><li><p> would-be adj. (形容想要成为…的人)未来的<br>  a would-be actor想要成为演员的人</p></li><li><p>   cabby英 n.出租汽车司机</p></li><li><p>   encyclopedic adj.百科全书的;百科知识的;</p></li><li><p>   approximately adv.大概;大约; </p></li><li><p>   navigate v.导航;航行;航海</p></li><li><p>   black-taxi driver</p></li><li><p> desperate adj. (因绝望而)不惜冒险的，不顾一切的，拼命的<br>  <del>(for sth)|</del>(to do sth)非常需要;极想;渴望</p></li><li><p>   olde adj. old的旧式拼法，现有时用于名称或广告，以使人感到某物是传统的</p></li><li><p> decent adj.像样的;相当不错的;<br>  a decent meal/job相当不错的饭菜/工作</p></li><li><p> alas int. (表示悲伤或遗憾)哎呀，唉<br>  Alas, it’s not that simple.<br>  哎呀，事情不是那么简单的。</p></li><li><p>   learn sth. by rote死记硬背</p></li><li><p>   satellite navigation卫星导航</p></li><li><p>   circuitous 迂回的</p></li><li><p>   hailing leapfrog 交替前进</p></li><li><p> emanate v.产生;表现;显示<br>  emanate from sth发源于; .从..发 出</p></li><li><p>   overwhelmingly adv.压倒性地</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CET-6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> CET-6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CET-6】 写作模板</title>
      <link href="/2020/01/14/CET6%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/01/14/CET6%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="CET-6试卷结构"><a href="#CET-6试卷结构" class="headerlink" title="CET-6试卷结构"></a>CET-6试卷结构</h1><p>（一）写作：短文写作（%15）</p><p>（二）听力理解（%35）</p><p>•  短篇新闻</p><p>•  长对话</p><p>•  听力篇章</p><p>（三）阅读理解（%35）</p><p>• 词汇理解：选词填空</p><p>• 长篇阅读：匹配</p><p>• 仔细阅读：单选题</p><p>（四）汉译英 段落翻译（%15）</p><h1 id="CET-6-作文类体裁及评分标准"><a href="#CET-6-作文类体裁及评分标准" class="headerlink" title="CET-6 作文类体裁及评分标准"></a>CET-6 作文类体裁及评分标准</h1><h2 id="体裁"><a href="#体裁" class="headerlink" title="体裁"></a>体裁</h2><p>1.议论文：就一般性主题表达个人观点</p><p>2.描述文</p><p>3.描述文+议论文：漫画作文</p><h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><p>1.切题</p><p>2.连贯：组句成段（连接词），组段成篇（过渡句）</p><p>3.运用正确的语法<br>   运用恰当的词汇<br>   合适的句子结构（表达地道）</p><h1 id="写作模板"><a href="#写作模板" class="headerlink" title="写作模板"></a>写作模板</h1><h2 id="选择-原因议论文"><a href="#选择-原因议论文" class="headerlink" title="选择/原因议论文"></a>选择/原因议论文</h2><p>Directions : Suppose you are asked to give advice on whether attend college at home or aboard, write an essay to state your opinion. You are required to write at least 150 words but no more than 200 words</p><p><strong>审题三要素</strong></p><p>• 体裁：议论文</p><p>• 内容：选择国内大学或出国留学</p><p>• 字数：150-200词</p><h3 id="第一段思路"><a href="#第一段思路" class="headerlink" title="第一段思路"></a>第一段思路</h3><p><font size=3><strong>1.背景交代</strong></font></p><p>• 主体’s opinions/views/choices upon 话题(that 同位语从句）vary from person to person</p><p>• Attitude toward …. vary from person to person.</p><p>• When it comes to …,people’s ideas/notions vary from person to person.</p><p>• Opinions differ greatly on this issue.</p><p>• Recently, we may hear quite different opinions on…</p><p>• There’s a heated debate on/over/upon…</p><p>• There is no consensus of opinions as to the view of…</p><p>• There’re some controversies as to be…</p><p>• There is no agreement among people ad to the view of…</p><p>• Wherever people go ,they will hear people talk about…. Whether you believe it or not, it had become a part of life.</p><p><font size=3><strong>2.引出主题</strong></font></p><p>• Some 主体 choose to … while others prefer to…</p><p>• Some hold/claim/believe/argue that … but others take the attitude that…</p><p>• Some people prefer…while others are inclined to …</p><p>• It is commonly accepted that … In contrast, others…</p><p>• Most people take it for granted that… however ,others hold…</p><p>• Adopt a totally different view</p><p>• Those who are in favor of believe /claim/maintain that… those who are against …argue/hold/point out that…</p><p><font size=3><strong>3.确立论点</strong></font></p><p>• As for me, I do incline to 观点（选择之一）</p><p>• As far as I am concerned , in my view/opinion;</p><p>• From my perspective;</p><p>• Personally;</p><p>• From my point of view;</p><p>• Personally speaking;</p><p>• From what I have discussed above;</p><p>• Weighing up the arguments on both sides , I am inclined to believed that…</p><p>• Personally speaking, I am standing on the side of….</p><p>• My own experience tells me that…</p><p>• In my opinion/view, we should attach more importance to…</p><p>• From my point of view, it is more…</p><p>• As far as I am concerned, I plan to….</p><h3 id="第二段思路"><a href="#第二段思路" class="headerlink" title="第二段思路"></a>第二段思路</h3><p><font size=3><strong>1.关键句</strong></font></p><p>• The reasons for my decision are as follows.</p><p>• A number of factors might contribute to /account for/ lead to/result in/cause/trigger the problem.</p><p><strong>原因</strong></p><p>• Firstly……   secondly…….  Finally…..</p><p>• On one hand ….. On the other hand,….</p><p>• For one thing,….. For another,…..</p><p>• In the first  place,….  In the second place….</p><p>• To begin with ,….. Furthermore,…..</p><p><font size=3><strong>2.原因1</strong></font></p><p>• On the top of list is that 原因1.</p><p><font size=3><strong>3.过渡句</strong></font></p><p>• In addition , there is the other point that no one can ignore.</p><p>• So long as you regard this analysis reasonable, I may go further.</p><p> 4.原因2<br>• It is universally admitted that 原因2</p><h3 id="第三段思路"><a href="#第三段思路" class="headerlink" title="第三段思路"></a>第三段思路</h3><p><font size=3><strong>1.重申观点</strong></font></p><p>• Considering  the two factors listed above, I would choose to…</p><p><font size=3><strong>2.做法（倡导建议）</strong></font></p><p>• It is advisable for us to devote ourselves to 选择1</p><p><font size=3><strong>3.强调</strong></font></p><p>• Only in this way can we 益处</p><p>• In terms of the analysis above,….</p><p>• According to the analysis above,…</p><p>• Based on the analysis above,…</p><h3 id="全文框架"><a href="#全文框架" class="headerlink" title="全文框架"></a>全文框架</h3><p>　　主体 ‘s opinions upon 话题 vary from person to person. Some 主体 choose to … while others prefer to… As for me, I do incline to 观点（选择之一）<br>　　The reasons for my decision are as follows. On the top of list is that 原因1  In addition , there is the other point that no one can ignore. It is universally admitted that 原因2<br>　　Considering  the two factors listed above, I would choose to选择1. It is advisable for us to devote ourselves to 选择1. Only in this way can we 益处</p><h2 id="论证类议论文"><a href="#论证类议论文" class="headerlink" title="论证类议论文"></a>论证类议论文</h2><p>Directions: for this part, you are allowed 30 minutes to write an essay commenting on the saying “knowledge is a treasure , but practice is the key to it .” you can cite one example or two to illustrate your point of view. You should write at least 150 words but no more than 200 words.</p><h3 id="第一段：引出主题，分析含义"><a href="#第一段：引出主题，分析含义" class="headerlink" title="第一段：引出主题，分析含义"></a>第一段：引出主题，分析含义</h3><p><font size=3><strong>第一句：引出主题，分析含义</strong></font></p><p>• When it comes to the topic 论点， we are often told the famous  remark that goes like this “___<strong><strong><strong><strong><strong>“ simple as the saying is , it implies the importance of 论点 in</strong></strong></strong></strong></strong></p><p>• A famous saying goes that …,which is very thought-provoking . It means (tells us an undeniable truth ) that….</p><p>• Just as the saying goes,________ The saying tells us________</p><p>• It is often said that <em><strong><strong><strong>.The saying indicates that</strong></strong></strong></em>.</p><p>• It is often said that _<strong><strong><strong>.Simple as the remark may sound it intends to tell us that</strong></strong></strong>.</p><p>• An ancient philosopher once started that_________. The saying obviously emphasizes/highlights_______.</p><p>• I’m not sure if you have heard one of 人名’s famous remark “_________” which stresses the significance of 论点.</p><p> <font size=3><strong>第二句 阐述正确性/重要性</strong></font></p><p>• As society develops , people are attaching much importance to…..</p><p>• 论点 must be attached great inportance to , as it contribute tremendously to the__________(advancement) of our ____(society)</p><h3 id="第二段：-观点论证段"><a href="#第二段：-观点论证段" class="headerlink" title="第二段： 观点论证段"></a>第二段： 观点论证段</h3><p><font size=3><strong>1.关键句</strong></font></p><p>• Take my personal experience for example,…..</p><p>• There are many facts/examples to support this argument.</p><p>• Whether for each individual or for a nation .XX plays a vital role in our life<br>    (XX works essentially in our daily life.)</p><p>• A good case in the point is +具体例子.</p><p>• Such examples might be given easily</p><p>• …is often cited as an example</p><p>• Most of successful personalities can clearly illustrate this point . For example…..</p><p><font size=3><strong>2.进行论证</strong></font> </p><p><em><strong>第一种 举例论证（名人事例，以小见大等等）</strong></em></p><p>　　Helen Keller did not let the flower of her life wither away although the illness left her deaf and blind. Instead, she strived to learn knowledge and became a master of 5 languages, a famous writer and educator.</p><p>　　Tomas Edison was not frightened by obstacles and failures. He found inspiration from previous researches and then invented the electrical lamp.</p><p><em><strong>第二种 列举论证（对个人，对企业，对国家）</strong></em></p><p>• The first and foremost one is that ….. In addition…</p><p>• For one thing ….. For another</p><p>• One of the possible function is that …. What’s more , another effect is that …..</p><p><font size=2><em><strong>Ø 对个人</strong></em></font></p><p>• Absolutely, there is no doubt that ….. Could serve as a guide to completing the target of our life/career</p><p>• I would like to liken this ….. To the engine of an automobile that can provide a motivation which drives us to be successful in life and in school.</p><p><font size=2><em><strong>Ø 对企业</strong></em></font></p><p>• XX will facilitate the growth of a company . Thereby making it more likely to be the winner in the modern competitive world.</p><p>• There is an agreement that would help cultivate a favorable/right/good/nice atmosphere which could foster the passion of working ,increase the efficiency of productivity and then create more wealth to promote the company’s development.</p><p><font size=2><em><strong>Ø 对国家</strong></em></font></p><p>• As a matter of fact, ….. Is in a large part contributing to the social progress and the country’s long-term stability.</p><p>• XX seriously impacts a country’s economy military culture as well as any other sectors which are key factors for a nation to win the international competition.</p><p><em><strong>第三种 正反论证</strong></em></p><p>• It goes without saying that anyone who is in possession of XXX is likely to overcome the obstacles of life and achieve  their destination. Unfortunately, the lack of … may lead to the final failure in life.</p><h3 id="第三段：总结观点段（如何做）"><a href="#第三段：总结观点段（如何做）" class="headerlink" title="第三段：总结观点段（如何做）"></a>第三段：总结观点段（如何做）</h3><p><font size=3><strong>1.总结句</strong></font></p><p>• Taking what has been discussed into consideration, it’s indisputable that….</p><p>• To sum up ;</p><p>• All in all;</p><p>• According to;</p><p>• In a word;</p><p>• In brief;</p><p>• In short;</p><p>• Taking all these factors into consideration , we naturally draw a conclusion that….</p><p>• Hence/therefore, we’d better come to the conclusion that….</p><p>• From what has been discussed above, we can arrive at the conclusion that….</p><p><font size=3><strong>2.再次说明重要性、正确性</strong></font></p><p>• We should always commit it to our memory that 论点 is of great significance to us all.</p><p>• I believe that 论点 is the source of ________. At no time should we underestimate the power of ______/</p><p>• ______ has been a hot word for a long time, and we cannot emphasize the importance of _____ too  much.</p><p>• It ‘s indisputable that a good many of people are fond of being 论点 . It’s so influential and helpful for us to know _______.</p><p><font size=3><strong>3.发起号召（做法）</strong></font> </p><p>• Only in this way can our society be more beautiful and harmonious.</p><p>• All we need is to seek to ____ with our utmost efforts  to make all kind of 论点 function smoothly.</p><p>• In our daily life , we need to develop a habit of <strong><strong><strong>and</strong></strong></strong>_.</p><p>• It is high time that strict measures were taken to stop.</p><p>• It is necessary that steps should be taken to …..</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><font size=3>第一段：引出主题段</font></p><ol><li><p>引出主题，分析含义</p></li><li><p>阐述正确性、重要性</p></li></ol><p><font size=3>第二段 观点论证段</font></p><ol><li>关键句</li><li>进行论证</li></ol><p><font size=3>第三段 总结观点段</font></p><ol><li>总结句</li><li>再次说明重要性（如何做）</li><li>发起号召（做法）</li></ol>]]></content>
      
      
      <categories>
          
          <category> CET-6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CET-6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第九章 作业</title>
      <link href="/2020/01/13/%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B9%9D%E7%AB%A0/"/>
      <url>/2020/01/13/%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="三角形类"><a href="#三角形类" class="headerlink" title="三角形类"></a>三角形类</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　先定义一个能描述平面上一条线段的类Beeline，包含私有数据成员为线段两个端点的坐标(X1，Y1，X2，Y2)，在类中定义形参默认值为0的构造函数，计算线段长度的公有成员函数Length()，显示线段两个端点坐标的公有成员函数show()。然后再定义一个能描述平面上三角形的类Triangle，其数据成员为用Beeline定义的对象line1，line2，line3。在类中定义的构造函数要能对对象成员进行初始化。再定义计算三角形面积的函数Area()及显示三条边端点坐标及面积的函数Print()，Print()函数中可调用show()函数显示三条边两端点坐标。<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>输入三角形三个顶点的坐标(x1,y1)、(x2,y2)、(x3,y3)。</p><p>其中 -100 &lt;= x1,x2,x3,y1,y2,y3 &lt;= 100，且为整数。</p><p>在主函数中创建类对象tri(x1,y1,x2,y2,x3,y3)，对应line1(x1, y1, x2, y2),line2(x2,y2,x3,y3),line3(x3,y3,x1,y1)。</p><p><strong><font size=4>【输出形式】</font></strong></p><p>调用Print()函数，将三角形三条边的端点坐标及面积。面积保留两位小数。</p><p>具体格式见样例。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>0 00 43 0</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>Three edges’ points are listed as follows:(0, 0),(0, 4)(0, 4),(3, 0)(3, 0),(0, 0)The area of this triangle is: 6.00.</code></pre><p>【提示】</p><p>1.严格按照输出样例输出，建议复制。</p><p>2.计算面积建议用海伦公式。</p><p>3.严格控制保留2位小数。</p><p>4.如果没有严格使用类，得分为0。</p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">beeline</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">beeline</span>()</span><br><span class="line">&#123;</span><br><span class="line">x1 = <span class="number">0</span>; x2 = <span class="number">0</span>; y1 = <span class="number">0</span>; y2 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">beeline</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">beeline::<span class="built_in">beeline</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">x1 = a;</span><br><span class="line">y1 = b;</span><br><span class="line">x2 = c;</span><br><span class="line">y2 = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">beeline::length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">beeline::show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x1 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y1 &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x2 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y2 &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">beeline line1, line2, line3;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Triangle</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Area</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Triangle::<span class="built_in">Triangle</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e, <span class="keyword">int</span> f) :<span class="built_in">line1</span>(a, b, c, d), <span class="built_in">line2</span>(c, d, e, f), <span class="built_in">line3</span>(e, f, a, b)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Triangle::Area</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> x, y, z;</span><br><span class="line">x = line1.<span class="built_in">length</span>();</span><br><span class="line">y = line2.<span class="built_in">length</span>();</span><br><span class="line">z = line3.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">return</span> ((<span class="number">1</span> / <span class="number">4.00</span>) * <span class="built_in">sqrt</span>((x + y + z) * (x + y - z) * (x + z - y) * (y + z - x)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Triangle::print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Three edges&#x27; points are listed as follows:&quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">line1.<span class="built_in">show</span>();</span><br><span class="line">line2.<span class="built_in">show</span>();</span><br><span class="line">line3.<span class="built_in">show</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The area of this triangle is: &quot;</span>;</span><br><span class="line">cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; (*<span class="keyword">this</span>).<span class="built_in">Area</span>() &lt;&lt; <span class="string">&quot;.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c, d, e, f;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f;</span><br><span class="line"><span class="function">Triangle <span class="title">x</span><span class="params">(a, b, c, d, e, f)</span></span>;</span><br><span class="line">x.<span class="built_in">print</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学生成绩类"><a href="#学生成绩类" class="headerlink" title="学生成绩类"></a>学生成绩类</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　设计学生成绩类Score。在主函数中定义学生成绩对象数组s[]。用Sum()计算每个学生的总成绩、用Show()显示每个学生的成绩。增加静态成员函数getAvg()，用于返回学生的总平均分。通过增加合适的成员、修改成员函数等完成这一功能。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>包含一组测试数据。第一行输入一个整数n（1&lt;=n&lt;=100）。</p><p>接下来n行。每行先输入一个整数op：</p><p>当op==1时，输入x, y, z。代表输入一位新同学i(i从1开始编号)的语文、数学、英语成绩，无需输出。</p><p>当op==2时，输入i，输出第i同学的总成绩。数据保证这位同学的成绩已经录入。</p><p>当op==3时，输入i，依次输出第i同学的语文数学英语成绩，成绩之间用空格隔开。</p><p>当op==4时，输出当前已经录入学生的总平均分，结果保留两位小数。</p><p>(1&lt;=n&lt;=100, 1&lt;=id&lt;=10, 1&lt;=op&lt;=3, 0&lt;=x,y,z&lt;=100,全部输入都为整型数)</p><p><strong><font size=4>【输出形式】</font></strong></p><p><a href="https://imgchr.com/i/l7nmJP"><img src="https://s2.ax1x.com/2020/01/13/l7nmJP.png" alt="l7nmJP.png"></a></p><p>注意输入之间会有一些输出，但测试只看cout结果。</p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span>  std;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Score</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span>  Chinese, Math, English;</span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">int</span>  TotalScore;</span><br><span class="line"><span class="keyword">static</span>  <span class="keyword">int</span>  TotalStudent;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Score</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setScore</span><span class="params">(<span class="keyword">int</span>  c, <span class="keyword">int</span>  m, <span class="keyword">int</span>  e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Chinese = c;</span><br><span class="line">Math = m;</span><br><span class="line">English = e;</span><br><span class="line">TotalScore += c + m + e;</span><br><span class="line">TotalStudent++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>(Chinese + Math + English);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; Chinese &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; Math &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; English;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="keyword">static</span> <span class="title">getAve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>)TotalScore / TotalStudent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="keyword">int</span> Score::TotalScore = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> Score::TotalStudent = <span class="number">0</span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span>  n, op, i, c, m, e;</span><br><span class="line"> cin &gt;&gt; n;</span><br><span class="line"> <span class="keyword">int</span>  id = <span class="number">1</span>;</span><br><span class="line"> Score  sco[<span class="number">11</span>];</span><br><span class="line"> <span class="keyword">while</span> (n--)</span><br><span class="line"> &#123;</span><br><span class="line"> cin &gt;&gt; op;</span><br><span class="line"> <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> cin &gt;&gt; c &gt;&gt; m &gt;&gt; e;</span><br><span class="line"> sco[id].<span class="built_in">setScore</span>(c, m, e);</span><br><span class="line"> id++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>  <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> cin &gt;&gt; i;</span><br><span class="line"> cout &lt;&lt; sco[i].<span class="built_in">Sum</span>();</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>  <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> cin &gt;&gt; i;</span><br><span class="line"> sco[i].<span class="built_in">Show</span>();</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; Score::<span class="built_in">getAve</span>();</span><br><span class="line"> cout &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电视类"><a href="#电视类" class="headerlink" title="电视类"></a>电视类</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　补全设计一个TV类和一个Remote类。Remote类的成员函数是TV类的友元， 电视类有状态、频道和音量基本属性，默认初始频道为5，默认初始音量为20。状态有开和关（-1表示关机状态，其他为开机状态）。</p><p>在主函数根据输入的op值进行不同操作。补全代码使程序满足如下要求。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>当op==1时，</p><p>输入电视操作命令如下：</p><p>OFF_ON（切换电视开关机状态）</p><p>VOL_UP（电视音量+1）</p><p>VOL_DOWN（电视音量-1）</p><p>CHA_NEXT（电视频道+1）</p><p>CHA_PRE(电视频道-1)</p><p>CHA_TO x（0&lt;=x&lt;=100，将电视频道切到x）</p><p>VOL_TO x（0&lt;=x&lt;=100，将电视音量切到x）</p><p>其中CHA_TO与VOL_TO通过调用友元类实现。</p><p>当op==2时，输出当前电视状态。</p><p>当op==3时，结束程序。</p><p><strong><font size=4>【输出形式】</font></strong></p><p>当op==2时，输出当前电视状态，具体格式见样例。</p><p><a href="https://imgchr.com/i/l7nfyD"><img src="https://s2.ax1x.com/2020/01/13/l7nfyD.png" alt="l7nfyD.png"></a></p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Remote</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Remote</span>() &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">volume_to</span><span class="params">(TV &amp;tv, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">channel_to</span><span class="params">(TV &amp;tv, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> state;</span><br><span class="line">    <span class="keyword">int</span> channel;</span><br><span class="line">    <span class="keyword">int</span> volume;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Remote::volume_to</span><span class="params">(TV &amp;tv, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Remote::channel_to</span><span class="params">(TV &amp;tv, <span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="built_in">TV</span>() &#123;&#125;;</span><br><span class="line">    <span class="built_in">TV</span>(<span class="keyword">int</span> st) :<span class="built_in">state</span>(st),<span class="built_in">volume</span>(<span class="number">20</span>),<span class="built_in">channel</span>(<span class="number">5</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onoff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                state = -state;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cha_next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            channel++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cha_pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            channel--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">vol_up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            volume++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">vol_down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            volume--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state == <span class="number">-1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;The TV is OFF&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;The TV is ON&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;The channel is &quot;</span> &lt;&lt; channel &lt;&lt; endl;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;The volume is &quot;</span> &lt;&lt; volume &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remote::volume_to</span><span class="params">(TV &amp;tv, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    tv.volume = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remote::channel_to</span><span class="params">(TV &amp;tv, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    tv.channel = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, op;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="function">TV <span class="title">tv</span><span class="params">(<span class="number">-1</span>)</span></span>;</span><br><span class="line">    Remote rem;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span>(s == <span class="string">&quot;OFF_ON&quot;</span>) tv.<span class="built_in">onoff</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;VOL_UP&quot;</span>) tv.<span class="built_in">vol_up</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;VOL_DOWN&quot;</span>) tv.<span class="built_in">vol_down</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;CHA_NEXT&quot;</span>) tv.<span class="built_in">cha_next</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;CHA_PRE&quot;</span>) tv.<span class="built_in">cha_pre</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;CHA_TO&quot;</span>) &#123;</span><br><span class="line">                cin &gt;&gt; x;</span><br><span class="line">                rem.<span class="built_in">channel_to</span>(tv, x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="string">&quot;VOL_TO&quot;</span>) &#123;</span><br><span class="line">                cin &gt;&gt; x;</span><br><span class="line">                rem.<span class="built_in">volume_to</span>(tv, x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">            tv.<span class="built_in">print</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第六章 作业</title>
      <link href="/2020/01/13/%E4%BD%9C%E4%B8%9A%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
      <url>/2020/01/13/%E4%BD%9C%E4%B8%9A%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="指定位置添加字符串"><a href="#指定位置添加字符串" class="headerlink" title="指定位置添加字符串"></a>指定位置添加字符串</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>从键盘输入一个字符串，并在串中的第一次出现的最大元素后边插入字符串”ab”。<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>任意输入一个字符串</p><p><strong><font size=4>【输出形式】</font></strong></p><p>在串中的最大元素后边插入字符串”ab”</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>123csCUMT</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>123csabCUMT</code></pre><p>说明：为了保证输入的字符串有空格，请使用cin.getline(char* , int);</p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>],s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i,max=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">cin.<span class="built_in">getline</span>(str , <span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">int</span>)str[i]&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=str[i];</span><br><span class="line">t=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=t;i++)</span><br><span class="line">s[i]=str[i];</span><br><span class="line">s[t+<span class="number">1</span>]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">s[t+<span class="number">2</span>]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(i=t+<span class="number">3</span>;str[i<span class="number">-3</span>];i++)</span><br><span class="line">&#123;</span><br><span class="line">s[i]=str[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计整数个数"><a href="#统计整数个数" class="headerlink" title="统计整数个数"></a>统计整数个数</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　输入一个字符串，其包括数字和非数字字符，如：a123x456 17935? 098tab，将其中连续的数字作为一个整数，依次存放到数组a中，统计共有多少个整数，并输出这些数。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>数字和非数字字符的字符串</p><p><strong><font size=4>【输出形式】</font></strong></p><p>1)整数个数<br>2）分别输出整数</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>a123x456 17935? 098tab583</code></pre><p>【注意需要保留带有空格的字符串，请不要使用gets，cin，练习使用cin.getline(char *str, int maxnum)】</p><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>51234561793598583</code></pre><p>说明：第一个输出项为整数的个数，后面的分别为具体的整数。注意，不需要输出提示类文字，如：“整数为”，“分别为”等字样。直接输出结果。有一个数字的也要输出。测试用例中没有超过整数范围连续数字。当遇到0开头的数字应舍去0。</p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j=<span class="number">0</span>,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;str[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[j]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[j]&lt;=<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;str[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[j]&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;str[j]&lt;=<span class="string">&#x27;9&#x27;</span>) cout&lt;&lt;str[j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>],*p=str;</span><br><span class="line">cin.<span class="built_in">getline</span>(p, <span class="number">99</span>);</span><br><span class="line">cout&lt;&lt;<span class="built_in">count</span>(p);</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="built_in">output</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　有5个字符串，首先将它们按照字符串中字符个数由小到大排序，再分别取出每个字符串的第三个字母合并成一个新的字符串输出（若少于三个字符的输出空格）。要求：利用字符串指针和指针数组实现。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>5个字符串，用回车分隔</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出一个字符串：按5个字符串中字符个数由小到大排序，再分别取出每个字符串的第三个字母合并成一个新的字符串输出，若少于三个字符的输出空格</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>test1234123testcumtthinkapples</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>cumt think apples 123test test1234concatenate string:mip3s</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;num<span class="number">-1</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">a[j]=t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">char</span> a[][<span class="number">100</span>],<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;s[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,b[<span class="number">5</span>],a[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>][<span class="number">100</span>],s2[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">input</span>(s,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">b[i]=a[i]=<span class="built_in">fun</span>(s[i],<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]==a[j])</span><br><span class="line">&#123;a[j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(s[j][<span class="number">0</span>]!=<span class="number">0</span>&amp;&amp;s[j][<span class="number">1</span>]!=<span class="number">0</span>&amp;&amp;s[j][<span class="number">2</span>]!=<span class="number">0</span>)</span><br><span class="line">s2[i]=s[j][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s2[i]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout&lt;&lt;s[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;concatenate string:&quot;</span>;</span><br><span class="line">cout&lt;&lt;s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第五章 作业</title>
      <link href="/2020/01/13/%E7%AC%AC%E4%BA%94%E7%AB%A0%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/01/13/%E7%AC%AC%E4%BA%94%E7%AB%A0%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="学生成绩统计"><a href="#学生成绩统计" class="headerlink" title="学生成绩统计"></a>学生成绩统计</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　定义数组存储5位学生的姓名和4科考试的成绩，计算并输出每个学生的总成绩和平均成绩，找出平均成绩最高的学生姓名。<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>依次输入每位学生的姓名和4科考试的成绩。</p><p><strong><font size=4>【输出形式】</font></strong></p><p>1)输出每个学生的总成绩和平均成绩；2）输出平均成绩最高的学生姓名。</p><p><strong><font size=4>【样例输入】</font></strong></p><p>说明：下列输入的字符及数字间的空格数为一个空格，如“zhangsan 87 76 91 79”中，“zhangsan”与“87”间为一个空格</p><pre><code>zhangsan 87 76 91 79lisi 90 89 78 69wangwu 80 88 91 85zhaoqian 77 79 78 75sunli 89 87 88 87</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><p>说明：下列输出内容格式如下：</p><p>cout&lt;&lt;setiosflags(ios::left)&lt;&lt;setw(10)&lt;&lt;Name&lt;&lt;setw(9)&lt;&lt;TotalScore&lt;&lt;AverageScore&lt;&lt;endl。<br>“Name”、”TotalScore”、”AverageScore”用具体的数值替代，如下例：</p><pre><code>Name TotalScore AverageScorezhangsan 333 83lisi 326 81wangwu 344 86zhaoqian 309 77sunli 351 87Student with the highest AverageScore is sunli,AverageScore is 87</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,max,m,totalsum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> avg[<span class="number">5</span>],sum[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">5</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> score[<span class="number">5</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;name[i];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;score[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line"> t+=score[i][j];</span><br><span class="line"> sum[i]=t;</span><br><span class="line"> avg[i]=sum[i]/<span class="number">4</span>;</span><br><span class="line"> t=<span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">5</span>;m++)</span><br><span class="line">    &#123;</span><br><span class="line">max=sum[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(max&lt;sum[m])</span><br><span class="line">&#123;</span><br><span class="line">max=sum[m];   </span><br><span class="line">p=m;</span><br><span class="line">    &#125;</span><br><span class="line">    totalsum+=sum[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::left)&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)&lt;&lt;<span class="string">&quot;Name&quot;</span>&lt;&lt;<span class="built_in">setw</span>(<span class="number">9</span>)&lt;&lt;<span class="string">&quot;TotalScore&quot;</span>&lt;&lt;<span class="string">&quot;AverageScore&quot;</span>&lt;&lt;endl; </span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">    cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::left)&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)&lt;&lt;name[j]&lt;&lt;<span class="built_in">setw</span>(<span class="number">9</span>)&lt;&lt;sum[j]&lt;&lt;avg[j]&lt;&lt;endl; </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Student with the highest AverageScore is &quot;</span>&lt;&lt;name[p]&lt;&lt;<span class="string">&quot;,AverageScore is &quot;</span>&lt;&lt;avg[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求二维数组的鞍点"><a href="#求二维数组的鞍点" class="headerlink" title="求二维数组的鞍点"></a>求二维数组的鞍点</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　找出一个二维数组（以三行四列的数组为例）中的鞍点，即该位置上的元素在该行上值最大，在该列上值最小（也可能没有鞍点）</p><p><strong><font size=4>【输入形式】</font></strong></p><p>标准输入：二维数组（以三行四列的数组为例）</p><p><strong><font size=4>【输出形式】</font></strong></p><p>标准输出：如果有鞍点，输出鞍点的值及所在行列（例如[1][2]=96 is Saddle Point），如果没有，输出没有鞍点（例如 No Saddle Point）</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>9 80 205 4090 60 96 1210 3 101 89</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>[1][2]=96 is Saddle Point</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,j,p,q=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> min,max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,min=a[i][j];i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(min&gt;=a[i][j])</span><br><span class="line">&#123;</span><br><span class="line">min=a[i][j];</span><br><span class="line">p=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>,max=a[p][n];n&lt;<span class="number">4</span>;n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;=a[p][n])</span><br><span class="line">&#123;</span><br><span class="line">max=a[p][n];</span><br><span class="line">q=n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(q==j)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;[&quot;</span>&lt;&lt;p&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;<span class="string">&quot;[&quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;a[p][j]&lt;&lt;<span class="string">&quot; is Saddle point&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">4</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No Saddle Point&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符统计"><a href="#字符统计" class="headerlink" title="字符统计"></a>字符统计</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　输入字符串s，编程统计出s中共出现了多少个数字字符。进一步考虑，如何统计出10个数字字符各自出现的次数。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入带数字字符的字符串</p><p><strong><font size=4>【输出形式】</font></strong></p><p>1）输出字符串中数字字符的总个数；<br>2）一次逐行输出从数字字符‘0’到数字字符‘9’的个数</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>abcdefk12345</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>Number’s amount is:5‘0…9’ amount is:0 1 1 1 1 1 0 0 0 0</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;s[i];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(s[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:a[<span class="number">0</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:a[<span class="number">1</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:a[<span class="number">2</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:a[<span class="number">3</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:a[<span class="number">4</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:a[<span class="number">5</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:a[<span class="number">6</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:a[<span class="number">7</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:a[<span class="number">8</span>]++;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:a[<span class="number">9</span>]++;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;Number&#x27;s amount is:&quot;</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;&#x27;0...9&#x27; amount is:&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">   cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第八章 输入输出流</title>
      <link href="/2020/01/13/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%85%AB%E7%AB%A0/"/>
      <url>/2020/01/13/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="实践题1"><a href="#实践题1" class="headerlink" title="实践题1"></a>实践题1</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　编程序，对 k=1，2，3，…，14，15，按下式分别计算出 15 组（i，d，c）：整数 i=2k-1；实数 d=kk+k-9.8；字符 c=’H’+k。并通过使用运算符“&lt;&lt;”将这15组数据保存到当前目录下自定义的text型磁盘文件ft.txt之中。<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>无</p><p><strong><font size=4>【输出形式】</font></strong></p><p>文件内容要求：每组占一行，每行中的输出项用一个空格进行分割。</p><p><strong><font size=4>【样例输入】</font></strong></p><p>无</p><p><strong><font size=4>【样例输出】</font></strong></p><p>文件内容格式如下：</p><pre><code>1 -7.8 I3 -3.8 J5 2.2 K7 10.2 L….以下省略….</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">f</span><span class="params">(<span class="string">&quot;ft.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">double</span> d;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;<span class="number">16</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"> i=<span class="number">2</span>*k<span class="number">-1</span>;</span><br><span class="line"> d=k*k+k<span class="number">-9.8</span>;</span><br><span class="line"> c=<span class="string">&#x27;H&#x27;</span>+k;</span><br><span class="line"> f&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题2"><a href="#实践题2" class="headerlink" title="实践题2"></a>实践题2</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　通过使用运算符“&gt;&gt;”和“&lt;&lt;”，对自定义的text型磁盘文件进行如下的指定操作。</p><p>（1）对i=1，2，3，…，15，计算d=i*i+0.5，并将15个结果写出到自定义的text型磁盘文件f1.txt中（注意，f1文件中的数据从小到大有序）；</p><p>（2）对i=1，2，3，…，10，计算d=10*i+0.5，并将10个结果写出到自定义的text型磁盘文件f2.txt中，而后再写出第11个数：357.9（注意，f2文件中的数据也从小到大有序）；</p><p>（3）读出文件f1.txt以及f2.txt中的数据，用来形成text型磁盘文件f3.txt，但要求存放于f3.txt中的数据仍然是有序的（按照从小到大的顺序）；</p><p><strong><font size=4>【输入形式】</font></strong></p><p>无</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出到f3.txt文件中（一行，数据间间隔为一个空格）</p><p><strong><font size=4>【样例输入】</font></strong></p><p>无</p><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>1.5 4.5 9.5 10.5 16.5…（以下略）</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">double</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">double</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">26</span>],d=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ofstream <span class="title">f</span><span class="params">(<span class="string">&quot;f1.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">d=i*i+<span class="number">0.5</span>;</span><br><span class="line">a[i<span class="number">-1</span>]=d;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">14</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">14</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">f&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">f.<span class="built_in">close</span>();</span><br><span class="line">f.<span class="built_in">open</span>(<span class="string">&quot;f2.txt&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">d=<span class="number">10</span>*i+<span class="number">0.5</span>;</span><br><span class="line">f&lt;&lt;d&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">a[i+<span class="number">14</span>]=d;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">25</span>]=<span class="number">357.9</span>;</span><br><span class="line">f&lt;&lt;a[<span class="number">25</span>];</span><br><span class="line">f.<span class="built_in">close</span>();</span><br><span class="line"><span class="built_in">sort</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">double</span> *m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">double</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">25</span>-i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m[j]&gt;m[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp=m[j];</span><br><span class="line">m[j]=m[j+<span class="number">1</span>];</span><br><span class="line">m[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ofstream file;</span><br><span class="line">file.<span class="built_in">open</span>(<span class="string">&quot;f3.txt&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">file&lt;&lt;m[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题3"><a href="#实践题3" class="headerlink" title="实践题3"></a>实践题3</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　使用 getline 成员函数读入某个text文件（f5.txt）中的“一篇文章”（如可以是一个C++源程序，文件名由用户从键盘输入），而后将该文件的各空行以及各程序行中的注解均删除掉（认为该行中从第一个双撇符号“//”开始直至行末的所有符号为注解），并将删除注解后的结果行写出到另一个文件（f6.txt）中。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>逐行读入文件f5.txt的内容。</p><p><strong><font size=4>【输出形式】</font></strong><br><strong><font size=4>【样例输入】</font></strong></p><p>文件f5.txt的内容如下：</p><pre><code>//This is test#include &lt;iostream&gt;int main()&#123;cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;return 0;&#125;</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><p>  文件f6.txt的内容如下：</p><pre><code>#include &lt;iostream&gt;int main()&#123;    cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;    return 0;&#125;</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function">ifstream <span class="title">f</span><span class="params">(<span class="string">&quot;f5.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">ofstream <span class="title">t</span><span class="params">(<span class="string">&quot;f6.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(f.<span class="built_in">getline</span>(str,<span class="number">100</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;/&#x27;</span>||str[<span class="number">0</span>]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;str[i];i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">str[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">t&lt;&lt;str;</span><br><span class="line">t&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">f.<span class="built_in">close</span>();</span><br><span class="line">t.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第七章 继承与派生</title>
      <link href="/2020/01/12/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%83%E7%AB%A0/"/>
      <url>/2020/01/12/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="实践题1"><a href="#实践题1" class="headerlink" title="实践题1"></a>实践题1</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　对本章示范题的用于管理商店商品的实现程序进行完善:完成Wardrobe立柜类的具体定义与使用，并添加“帽子仓库类”以及“立柜仓库类”的定义及使用，以使程序能够对商店的这三种商品（衬衣、帽子、立柜）进行简单的管理与应用。</p><p>要对商品实现的操作有:商品的进库（增加某类商品及其库存量），商品的出库（减少某类商品及其库存量），以及某类商品总价格的计算。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>根据提示输入</p><p><strong><font size=4>【输出形式】</font></strong></p><p>把处理后的数据输出</p><p><font size=4><strong>【样例】</strong>（注意：红色为输入部分，黑色为输出部分）</font></p><p>5 * shirt data in: price/place/material =&gt;<font color=red>60 Tianjin Cotton</font></p><p>3 * shirt data in: price/place/material =&gt;<font color=red>80 Beijing Wool</font></p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>80 Beijing Wool</p><p>80 Beijing Wool</p><p>80 Beijing Wool</p><p>shiSto.TotalPrice()=540</p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>60 Tianjin Cotton</p><p>shiSto.TotalPrice()=240</p><p>5 * Cap data in: price/place/material/style =&gt;<font color=red>40 Suzhou Cotton M</font></p><p>3 * Cap data in: price/place/material/style =&gt;<font color=red>30 Wuxi Wool S</font></p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>30 Wuxi Wool S</p><p>30 Wuxi Wool S</p><p>30 Wuxi Wool S</p><p>capSto.TotalPrice()=290</p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>40 Suzhou Cotton M</p><p>capSto.TotalPrice()=160</p><p>5 * Wardrobe data in: price/place/material/color =&gt;<font color=red>160 Guangzhou Pine Yellow</font></p><p>3 * Wardrobe data in: price/place/material/color =&gt;<font color=red>200 Suzhou Oak Brown</font></p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>200 Suzhou Oak Brown</p><p>200 Suzhou Oak Brown</p><p>200 Suzhou Oak Brown</p><p>WarSto.TotalPrice()=1400</p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>160 Guangzhou Pine Yellow</p><p>WarSto.TotalPrice()=640</p><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">double</span> price;</span><br><span class="line">        <span class="keyword">char</span> place[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Base</span>(<span class="keyword">double</span> pr,<span class="keyword">char</span> *pl,<span class="keyword">int</span> cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            price = pr;</span><br><span class="line">            <span class="built_in">strcpy</span>(place,pl);</span><br><span class="line">            count = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; price &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; place&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">InSomething</span><span class="params">(<span class="keyword">int</span> add_cnt)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            count +=add_cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OutSomething</span><span class="params">(<span class="keyword">int</span> del_cnt)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            count -= del_cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">TotalPrice</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shirt</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">char</span> material[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Shirt</span>(<span class="keyword">double</span> pr,<span class="keyword">char</span> *pl,<span class="keyword">int</span> cnt,<span class="keyword">char</span> *mat):<span class="built_in">Base</span>(pr,pl,cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(material,mat);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Base::<span class="built_in">display</span>();</span><br><span class="line">            cout &lt;&lt;material&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cap</span>:</span><span class="keyword">public</span> Shirt&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">char</span> style;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Cap</span>(<span class="keyword">double</span> pr,<span class="keyword">char</span> *pl,<span class="keyword">int</span> cnt,<span class="keyword">char</span> *mat,<span class="keyword">char</span> sty):<span class="built_in">Shirt</span>(pr,pl,cnt,mat)</span><br><span class="line">        &#123;</span><br><span class="line">            style = sty;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span> <span class="params">()</span></span>&#123;</span><br><span class="line">            Shirt::<span class="built_in">display</span>();</span><br><span class="line">            cout &lt;&lt;style;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wardrobe</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">char</span> material[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">char</span> color[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Wardrobe</span>(<span class="keyword">double</span> pr,<span class="keyword">char</span> *pl,<span class="keyword">int</span> cnt,<span class="keyword">char</span> *mat,<span class="keyword">char</span> *col):<span class="built_in">Base</span>(pr,pl,cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(material,mat);</span><br><span class="line">            <span class="built_in">strcpy</span>(color,col);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Base::<span class="built_in">display</span>();</span><br><span class="line">            cout &lt;&lt; material &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; color;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">char</span> place[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> material[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">char</span> style;</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">20</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5 * shirt data in: price/place/material =&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; price &gt;&gt; place &gt;&gt; material;</span><br><span class="line">    <span class="function">Shirt <span class="title">s1</span><span class="params">(price,place,<span class="number">5</span>,material)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3 * shirt data in: price/place/material =&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; price &gt;&gt; place &gt;&gt; material;</span><br><span class="line">    <span class="function">Shirt <span class="title">s2</span><span class="params">(price,place,<span class="number">3</span>,material)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        s1.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s2.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;shiSto.TotalPrice()=&quot;</span> &lt;&lt; (s1.<span class="built_in">TotalPrice</span>())*<span class="number">5</span>+(s2.<span class="built_in">TotalPrice</span>())*<span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s1.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;shiSto.TotalPrice()=&quot;</span> &lt;&lt; (s1.<span class="built_in">TotalPrice</span>())*<span class="number">4</span>&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5 * Cap data in: price/place/material/style =&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; price &gt;&gt; place &gt;&gt; material &gt;&gt; style;</span><br><span class="line">    <span class="function">Cap <span class="title">c1</span><span class="params">(price,place,<span class="number">5</span>,material,style)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3 * Cap data in: price/place/material/style =&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; price &gt;&gt; place &gt;&gt; material &gt;&gt; style;</span><br><span class="line">    <span class="function">Cap <span class="title">c2</span><span class="params">(price,place,<span class="number">3</span>,material,style)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c1.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c2.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;capSto.TotalPrice()=&quot;</span> &lt;&lt;(c1.<span class="built_in">TotalPrice</span>())*<span class="number">5</span>+(c2.<span class="built_in">TotalPrice</span>())*<span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c1.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;capSto.TotalPrice()=&quot;</span> &lt;&lt;(c1.<span class="built_in">TotalPrice</span>())*<span class="number">4</span>&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5 * Wardrobe data in: price/place/material/color =&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; price &gt;&gt; place &gt;&gt; material&gt;&gt;color;</span><br><span class="line">    <span class="function">Wardrobe <span class="title">w1</span><span class="params">(price,place,<span class="number">5</span>,material,color)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3 * Wardrobe data in: price/place/material/color =&gt;&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; price &gt;&gt; place &gt;&gt; material&gt;&gt;color;</span><br><span class="line">    <span class="function">Wardrobe <span class="title">w2</span><span class="params">(price,place,<span class="number">3</span>,material,color)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        w1.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        w2.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;WarSto.TotalPrice()=&quot;</span>&lt;&lt; (w1.<span class="built_in">TotalPrice</span>())*<span class="number">5</span>+(w2.<span class="built_in">TotalPrice</span>())*<span class="number">3</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        w1.<span class="built_in">display</span>();</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;WarSto.TotalPrice()=&quot;</span> &lt;&lt; (w1.<span class="built_in">TotalPrice</span>())*<span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题2"><a href="#实践题2" class="headerlink" title="实践题2"></a>实践题2</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　利用继承性与派生类来管理学生教师档案:由Person（人员）类出发（作为基类），派生出Student（学生）及Teacher（教师）类；而后又由Student（学生）类出发（作为基类），派生出GraduateStudent（研究生）类。可假定这几个类各自具有的数据成员为:</p><p>Person（人员）类: 姓名、性别、年龄；</p><p>Student（学生）类: 姓名、性别、年龄、学号、系别；</p><p>Teacher（教师）类: 姓名、性别、年龄、职称、担任课程；</p><p>GraduateStudent（研究生）类: 姓名、性别、年龄、学号、系别、导师。</p><p>为简化起见，每个类可只设立构造函数以及显示类对象数据的成员函数Print。而后编制简单的主函数，说明上述有关的类对象，并对其类成员函数进行简单使用（调用）。<br><strong><font size=4>【输入形式】</font></strong><br><strong><font size=4>【输出形式】</font></strong><br><strong><font size=4>【样例输入】</font></strong><br>无<br><strong><font size=4>【样例输出】</font></strong></p><pre><code>== per1.Display() =&gt; name,age,sexsun 42 M== stu1.Display() =&gt; name,age,sex,Reg_Number,departmentguo 22 F 1001 comp== teach1.Display() =&gt; name,age,sex,course,postfang 38 M english professor== gStu.Display() =&gt; name,age,sex,Reg_Number,department,advisorwu 25 M 1021 comp wei</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> <span class="keyword">char</span>* n, <span class="keyword">char</span> s, <span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name, n);</span><br><span class="line">sex = s;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">Getname</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Getsex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person::Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sex &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> :</span><span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> major[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(<span class="keyword">const</span> <span class="keyword">char</span>* n, <span class="keyword">char</span> s, <span class="keyword">int</span> a, <span class="keyword">int</span> number, <span class="keyword">const</span> <span class="keyword">char</span>* m) :<span class="built_in">Person</span>(n, s, a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(major, m);</span><br><span class="line">num = number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getname</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getage</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getsex</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; major &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getnumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">Getmajor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> major;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> :</span><span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> course[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> post[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Teacher</span>(<span class="keyword">char</span>* n, <span class="keyword">char</span> s, <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">char</span>* cor, <span class="keyword">const</span> <span class="keyword">char</span>* p) :<span class="built_in">Person</span>(n, s, a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(course, cor);</span><br><span class="line"><span class="built_in">strcpy</span>(post, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getname</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getage</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getsex</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; course &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; post &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span> :</span><span class="keyword">public</span> Student</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> advisor[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GraduateStudent</span>(<span class="keyword">char</span> n[<span class="number">10</span>], <span class="keyword">char</span> s, <span class="keyword">int</span> a, <span class="keyword">int</span> number, <span class="keyword">char</span>* m, <span class="keyword">const</span> <span class="keyword">char</span>* adv) :<span class="built_in">Student</span>(n, s, a, number, m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(advisor, adv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getname</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getage</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getsex</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getnumber</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Getmajor</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; advisor &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;== per1.Display() =&gt; name,age,sex&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">Person <span class="title">per</span><span class="params">(<span class="string">&quot;sun&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">42</span>)</span></span>;</span><br><span class="line">per.<span class="built_in">Print</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;== stu1.Display() =&gt;name,age,sex,Reg_Number,department&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">Student <span class="title">stu</span><span class="params">(<span class="string">&quot;guo&quot;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">22</span>, <span class="number">1001</span>, (<span class="keyword">char</span>*)<span class="string">&quot;comp&quot;</span>)</span></span>;</span><br><span class="line">stu.<span class="built_in">Print</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;== teach1.Display() =&gt;name,age,sex,course,post&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">Teacher <span class="title">teach</span><span class="params">((<span class="keyword">char</span>*)<span class="string">&quot;fang&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">38</span>, (<span class="keyword">char</span>*)<span class="string">&quot;english&quot;</span>, (<span class="keyword">char</span>*)<span class="string">&quot;professor&quot;</span>)</span></span>;</span><br><span class="line">teach.<span class="built_in">Print</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;== gStu.Display() =&gt;name,age,sex,Reg_Number,department,advisor&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">GraduateStudent <span class="title">gstu</span><span class="params">((<span class="keyword">char</span>*)<span class="string">&quot;wu&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">25</span>, <span class="number">1021</span>, (<span class="keyword">char</span>*)<span class="string">&quot;comp&quot;</span>, (<span class="keyword">char</span>*)<span class="string">&quot;wei&quot;</span>)</span></span>;</span><br><span class="line">gstu.<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题3"><a href="#实践题3" class="headerlink" title="实践题3"></a>实践题3</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>自定义一个日期时间类DateTimeType，它含有类DateType与类TimeType的类对象作为其数据成员，并具有所列的其他几个成员函数。而后编制主函数，说明DateTimeType的类对象，并对其成员函数以及二对象成员所属类的公有成员函数进行使用。</p><p>class DateTimeType { //自定义的日期时间类 DateTimeType</p><p>DateType date; //类 DateType 的类对象 date 作为其数据成员</p><p>TimeType time; //类 TimeType 的类对象 time 作为其另一个数据成员</p><p>public:</p><p>DateTimeType(int y0=1, int m0=1, int d0=1, int hr0=0, int mi0=0, int se0=0);</p><p>//构造函数，设定 DateTimeType 类对象的日期时间，并为各参数设置了默认值</p><p>DateType&amp; GetDate(){ return date; } //返回本类的私有数据对象 data</p><p>TimeType&amp; GetTime(){ return time; } //返回本类的私有数据对象 time</p><p>void IncrementSecond(int s); //增加若干秒，注意“进位”问题</p><p>void PrintDateTime(); //屏幕输出日期时间对象的有关数据</p><p>};</p><p>注意，每一个DateTimeType类对象中总包含有一个DateType类对象（对象成员）以及一个TimeType类对象（对象成员），编制与实现本程序时，也必须包含DateType与TimeType自定义类（类型）。</p><p>之所以设置了公有的类成员函数GetDate与GetTime，是为类外如主函数处使用该类的私有数据成员date与time提供方便（否则的话，类外无法直接访问该类的私有数据成员）。另外，两成员函数返回的都为引用，为的是可将返回对象当作一个独立变量来使用（如可以继续作左值等）。例如，假设编制了如下形式的主函数:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">DateTimeType <span class="title">dttm1</span><span class="params">(<span class="number">1999</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">59</span>,<span class="number">59</span>)</span>, dttm2</span>;</span><br><span class="line">(dttm1.<span class="built_in">GetDate</span>()).<span class="built_in">PrintDate</span>(); <span class="comment">//调用对象成员所属类的公有成员函数</span></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">dttm1.<span class="built_in">PrintDateTime</span>(); <span class="comment">//调用本派生类的成员函数 PrintDateTime</span></span><br><span class="line">dttm2.<span class="built_in">PrintDateTime</span>();</span><br><span class="line">dttm1.<span class="built_in">IncrementSecond</span>(<span class="number">30</span>) ; <span class="comment">//调用本派生类成员函数</span></span><br><span class="line">dttm1.<span class="built_in">PrintDateTime</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font size=4>【输入形式】</font></strong><br><strong><font size=4>【输出形式】</font></strong><br><strong><font size=4>【样例输入】</font></strong><br><strong><font size=4>【样例输出】</font></strong></p><pre><code>1999-12-311999-12-31 23:59:591-1-1 0:0:02000-1-1 0:0:29</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="built_in">DateType</span>(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">year = y; month = m; day = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; day &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> hour;</span><br><span class="line"><span class="keyword">int</span> minute;</span><br><span class="line"><span class="keyword">int</span> second;</span><br><span class="line"><span class="built_in">TimeType</span>(<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">hour = h; minute = m; second = s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateTimeType</span></span></span><br><span class="line"><span class="class">&#123;</span>   </span><br><span class="line">DateType date;</span><br><span class="line">TimeType time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DateTimeType</span>(<span class="keyword">int</span> y0 = <span class="number">1</span>, <span class="keyword">int</span> m0 = <span class="number">1</span>, <span class="keyword">int</span> d0 = <span class="number">1</span>, <span class="keyword">int</span> hr0 = <span class="number">0</span>, <span class="keyword">int</span> mi0 = <span class="number">0</span>, <span class="keyword">int</span> se0 = <span class="number">0</span>) : <span class="built_in">date</span>(y0, m0, d0), <span class="built_in">time</span>(hr0, mi0, se0)&#123;&#125;</span><br><span class="line"><span class="function">DateType&amp; <span class="title">GetDate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TimeType&amp; <span class="title">GetTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncrementSecond</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintDateTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; date.year &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; date.month &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; date.day &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; time.hour &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; time.minute &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; time.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DateTimeType::IncrementSecond</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; m = date.month;</span><br><span class="line">time.second += s;</span><br><span class="line"><span class="keyword">if</span> (time.second &gt;= <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">time.minute += time.second / <span class="number">60</span>;</span><br><span class="line">time.second = time.second % <span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span> (time.minute &gt;= <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">time.hour+=time.minute/<span class="number">60</span>;</span><br><span class="line">time.minute=time.minute%<span class="number">60</span>;</span><br><span class="line"><span class="keyword">if</span> (time.hour &gt; <span class="number">23</span>)</span><br><span class="line">&#123;</span><br><span class="line">time.hour = time.hour - <span class="number">24</span>;</span><br><span class="line">date.day++;</span><br><span class="line"><span class="keyword">if</span> ((m == <span class="number">1</span> || m == <span class="number">3</span> || m == <span class="number">5</span> || m == <span class="number">7</span> || m == <span class="number">8</span> || m == <span class="number">10</span>) &amp;&amp; date.day == <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">m++;</span><br><span class="line">date.day = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((m == <span class="number">4</span> || m == <span class="number">6</span> || m == <span class="number">9</span> || m == <span class="number">11</span>) &amp;&amp; date.day == <span class="number">31</span>)</span><br><span class="line">&#123;</span><br><span class="line">m++;</span><br><span class="line">date.day = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">12</span> &amp;&amp; date.day == <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line">date.year++;</span><br><span class="line">date.day = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((date.year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; date.year % <span class="number">100</span> != <span class="number">0</span>) || date.year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">2</span> &amp;&amp; date.day == <span class="number">30</span>)</span><br><span class="line">&#123;</span><br><span class="line">m++;</span><br><span class="line">date.day = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">2</span> &amp;&amp; date.day == <span class="number">29</span>)</span><br><span class="line">&#123;</span><br><span class="line">m++;</span><br><span class="line">date.day = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">DateTimeType <span class="title">dttm1</span><span class="params">(<span class="number">1999</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>)</span>, dttm2</span>;</span><br><span class="line">(dttm1.<span class="built_in">GetDate</span>()).<span class="built_in">PrintDate</span>();</span><br><span class="line">dttm1.<span class="built_in">PrintDateTime</span>();</span><br><span class="line">dttm2.<span class="built_in">PrintDateTime</span>();</span><br><span class="line">dttm1.<span class="built_in">IncrementSecond</span>(<span class="number">30</span>);</span><br><span class="line">dttm1.<span class="built_in">PrintDateTime</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第六章 类与对象</title>
      <link href="/2020/01/12/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
      <url>/2020/01/12/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="复数类"><a href="#复数类" class="headerlink" title="复数类"></a>复数类</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　自定义一个复数类型Complex，其中含有若干成员函数，使用该类可以完成复数的加法以及对复数的输出。请完成类定义，并编制主函数，说明Complex类对象，对定义的各成员函数进行调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> real; <span class="comment">//复数实部</span></span><br><span class="line">    <span class="keyword">double</span> imag; <span class="comment">//复数虚部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span> (); <span class="comment">//无参构造函数，将复数对象的实部和虚部均置为0</span></span><br><span class="line">    <span class="built_in">Complex</span> (<span class="keyword">double</span> r, <span class="keyword">double</span> i); <span class="comment">//有参构造函数，设置对象的实部和虚部</span></span><br><span class="line">    <span class="function">Complex <span class="title">AddCom</span><span class="params">(Complex c2)</span></span>; <span class="comment">//调用者对象与对象c2相加，返回Complex类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutCom</span> <span class="params">()</span> </span>; <span class="comment">//输出调用者对象的有关数据（各分量）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体 要求如下：</p><p>1、实现有参构造函数 Complex (double r, double i);</p><p>2、实现 Complex AddCom(Complex c2); 调用者对象与对象c2相加，返回Complex类对象</p><p>3、实现void OutCom () ;实现输出调用者对象的有关数据分量（一定要输出虚部的符号i），如果该数为纯虚数时,不需要输出实部，当虚部为0时，不需要输出实部。</p><p>4．编制主函数main，作用有参函数说明类对象cx,cy，使用 Complex 调用AddCom实现复数加法，并将相加的结果调用 OutCom方法以复数的形式输出。<br><strong><font size=4>【输入形式】</font></strong></p><p>输入包括a,b,c,d四个整数，第一个复数为a+bi，第二个复数为c+di</p><p><strong><font size=4>【输出形式】</font></strong><br><strong><font size=4>【样例输入】</font></strong></p><pre><code>1 2 3 4</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>4+6i</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> real;</span><br><span class="line"><span class="keyword">double</span> imag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">real = <span class="number">0</span>;</span><br><span class="line">imag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Complex</span>(<span class="keyword">double</span>,<span class="keyword">double</span>);</span><br><span class="line"><span class="function">Complex <span class="title">AddCom</span><span class="params">(Complex)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutCom</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> i)</span><br><span class="line">&#123;</span><br><span class="line">real = r;</span><br><span class="line">imag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Complex <span class="title">Complex::AddCom</span><span class="params">(Complex c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(*<span class="keyword">this</span>).imag += c2.imag;</span><br><span class="line">(*<span class="keyword">this</span>).real += c2.real;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex::OutCom</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (real == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; imag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (imag == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; real;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; imag &lt;&lt; <span class="string">&quot;i&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c, d;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line"><span class="function">Complex <span class="title">cx</span><span class="params">(a, b)</span></span>;</span><br><span class="line"><span class="function">Complex <span class="title">cy</span><span class="params">(c, d)</span></span>;</span><br><span class="line">cx.<span class="built_in">AddCom</span>(cy);</span><br><span class="line">cx.<span class="built_in">OutCom</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学生类"><a href="#学生类" class="headerlink" title="学生类"></a>学生类</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　设计一个学生类（CStudent），其私有数据成员：注册号、姓名、数学、外语、计算机课程的成绩。公有成员函数是：求三门课总成绩的函数 Sum；求三门课平均成绩的函数 Average；显示学生数据信息的函数 Display；设置学生数据信息的函数 SetData。</p><p>1．可按如下样式设计 CStudent类的各数据成员以及成员函数<br>class CStudent { //学生类 CStudent<br>unsigned long reg_num; //数据成员：注册号<br>char name[30]; //数据成员：姓名<br>float math, eng, comp; //数据成员：数学、英语、计算机成绩<br>public: //公有成员函数<br>float Sum(); //求三门课总成绩的函数 Sum<br>float Average(); //求三门课平均成绩的函数 Average<br>Display(); //显示学生数据信息的函数 Display<br>SetData (unsigned long r, char* n, float m, float e, float c) ;<br>//设置学生数据信息的函数 SetData<br>};</p><p>在主函数，通过使用“CStudent stu[150];”的语句，来说明一个CStudent类对象的数组stu，而后通过各对象stu[i]来处理并求取每一学生的总成绩、平均成绩等。</p><p>（1）输入本次欲处理的学生人数 TOTAL（小于等于 150 的正整数）；<br>（2）输入全班 TOTAL 个学生的有关信息，依次放入对象数组的各元素 stu[i]中（通过使用“stu[i].SetData(…);”形式的语句来实现）；<br>（3）对全班TOTAL个学生，依次通过对象stu[i]来求出其总成绩、平均成绩等（其中要使用形如“stu[i].Sum()”以及“stu[i].Average()”式样的对成员函数进行调用的语句），并同时求出全班学生总成绩最高者处于 stu 数组的下标位置idx_max，而后通过使用“stu[idx_max].Display();”来输出该学生有关的全部数据信息。</p><p>3．程序执行后的输入输出界面样式可设计为：<br>TOTAL=3<br>CStudent 1 : 100001 ma 78 86 90（注意空格）<br>CStudent 2 : 100002 li 85 91 88<br>CStudent 3 : 100003 hu 82 89 88<br>CStudent1.Sum=254,CStudent1.average=84.6667<br>CStudent2.Sum=264,CStudent2.average=88<br>CStudent3.Sum=259,CStudent3.average=86.3333<br>class_Sum_max=264<br>The infomation of the CStudent with class_Sum_max : 100002 li 85 91 88</p><p><strong><font size=4>【输入形式】</font></strong></p><p>TOTAL=3<br>CStudent 1 : 100001 ma 78 86 90（注意空格）<br>CStudent 2 : 100002 li 85 91 88<br>CStudent 3 : 100003 hu 82 89 88</p><p><strong><font size=4>【输出形式】</font></strong></p><p>CStudent1.Sum=254,CStudent1.average=84.6667<br>CStudent2.Sum=264,CStudent2.average=88<br>CStudent3.Sum=259,CStudent3.average=86.3333<br>class_Sum_max=264<br>The infomation of the CStudent with class_Sum_max : 100002 li 85 91 88</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>3100001 ma 78 86 90100002 li 85 91 88100003 hu 82 89 88</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>TOTAL=3CStudent 1 : 100001 ma 78 86 90（注意空格）CStudent 2 : 100002 li 85 91 88CStudent 3 : 100003 hu 82 89 88CStudent1.Sum=254,CStudent1.average=84.6667CStudent2.Sum=264,CStudent2.average=88CStudent3.Sum=259,CStudent3.average=86.3333class_Sum_max=264The infomation of the CStudent with class_Sum_max : 100002 li 85 91 88</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cstudent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> reg_num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">float</span> math, eng, comp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Sum</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Average</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> r, <span class="keyword">char</span>* n, <span class="keyword">float</span> m, <span class="keyword">float</span> e, <span class="keyword">float</span> c)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cstudent::Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; reg_num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; math &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; eng &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; comp &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Cstudent::Sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>(math + eng + comp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Cstudent::Average</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (*<span class="keyword">this</span>).<span class="built_in">Sum</span>() / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cstudent::setData</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> r, <span class="keyword">char</span>* n, <span class="keyword">float</span> m, <span class="keyword">float</span> e, <span class="keyword">float</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">reg_num = r;</span><br><span class="line"><span class="built_in">strcpy</span>(name, n);</span><br><span class="line">math = m;</span><br><span class="line">eng = e;</span><br><span class="line">comp = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> num;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">float</span> math, eng, comp;</span><br><span class="line"><span class="keyword">float</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max_stu = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">Cstudent* cp = <span class="keyword">new</span> Cstudent[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; num &gt;&gt; name &gt;&gt; math &gt;&gt; eng &gt;&gt; comp;</span><br><span class="line">cp[j].<span class="built_in">setData</span>(num, name, math, eng, comp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; cp[j].<span class="built_in">Sum</span>())</span><br><span class="line">&#123;</span><br><span class="line">max_stu = j;</span><br><span class="line">max = cp[j].<span class="built_in">Sum</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;TOTAL=&quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;CStudent &quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line">cp[i].<span class="built_in">Display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;CStudent&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;.Sum=&quot;</span> &lt;&lt; cp[i].<span class="built_in">Sum</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,CStudent&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;.average=&quot;</span> &lt;&lt; cp[i].<span class="built_in">Average</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;class_Sum_max=&quot;</span> &lt;&lt; max &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The infomation of the CStudent with class_Sum_max : &quot;</span>;</span><br><span class="line">cp[max_stu].<span class="built_in">Display</span>();</span><br><span class="line"><span class="keyword">delete</span>[]cp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第五章 指针</title>
      <link href="/2020/01/12/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
      <url>/2020/01/12/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串统计"><a href="#字符串统计" class="headerlink" title="字符串统计"></a>字符串统计</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>在进行文章重复度检查时，经常需要统计一段英文中的单词数量，并找出长度最长的单词。</p><p>设有如下定义：char str[500];</p><p>编写程序，通过利用cin.getline(str,500);实现从键盘输入一小段英文（其中可以包含空格，但在同一行），利用函数统计该段英文中包含几个单词，输出统计出的单词数量、最长单词的长度以及长度最长的单词，空格隔开。</p><p>注意：函数声明使用void split(char *str);如果有最长的单词不只一个，输出最先找到的那个。<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>一小段英文，不要超过500个字符</p><p><strong><font size=4>【输出形式】</font></strong></p><p>单词数量、最长单词的长度以及长度最长的单词，空格隔开。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>welcome to china university of mining and technology</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>8 10 university</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;p[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span>*p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>,max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">    num++;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27; &#x27;</span>||p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;num)</span><br><span class="line">&#123;</span><br><span class="line">max=num;</span><br><span class="line">    &#125;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">char</span>*p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>,max=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">    num++;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27; &#x27;</span>||p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;num)</span><br><span class="line">&#123;</span><br><span class="line">max=num;</span><br><span class="line">t=i-max;</span><br><span class="line">    &#125;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=t+<span class="number">1</span>;p[i]!=<span class="string">&#x27; &#x27;</span>;i++)</span><br><span class="line">cout&lt;&lt;p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">500</span>],*p=str;</span><br><span class="line">cin.<span class="built_in">getline</span>(str,<span class="number">500</span>);</span><br><span class="line">cout&lt;&lt;<span class="built_in">count</span>(p);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fun</span>(p);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">output</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复数提取"><a href="#复数提取" class="headerlink" title="复数提取"></a>复数提取</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　编写如下原型的函数：</p><p>void split(double x,intiPart,doublefPart);</p><p>提取出数据x的整数部分与小数部分，分别放于iPart与fPart处，由于形参iPart与fPart都是指针，从而可实现将这两个结果“带回”到主函数中。</p><p>在主函数中</p><p>输入一个数</p><p>输出它的整数部分和小数部分，用空格隔开。</p><p>提示：一个double类型数，强制类型转换后就是int，也就是整数部分，差为小数部分。这两个值用指针iPart和指针fPart带回（通过修改指针的目标变量值。）</p><p><strong><font size=4>【输入形式】</font></strong></p><p>一个数</p><p><strong><font size=4>【输出形式】</font></strong></p><p>整数部分 小数部分，用空格隔开</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>12.3</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>12 0.3</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> *iPart,<span class="keyword">double</span> *fPart)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *fPart = x-(<span class="keyword">int</span>)x;</span><br><span class="line">    *iPart=(<span class="keyword">int</span>)x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> zhengshu;</span><br><span class="line">    <span class="keyword">double</span> xiaoshu,x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    <span class="built_in">split</span>(x,&amp;zhengshu,&amp;xiaoshu);</span><br><span class="line">    cout &lt;&lt; zhengshu &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; xiaoshu;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找子串最后一次出现的头字符位置"><a href="#找子串最后一次出现的头字符位置" class="headerlink" title="找子串最后一次出现的头字符位置"></a>找子串最后一次出现的头字符位置</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>编制具有如下原型的函数findLast：</p><p>charfindLast(charsourceStr,char*subStr);</p><p>findLast函数则要返回源串sourceStr中最后一次出现subStr子字符串的头字符位置。</p><p>而后编制主函数，输入两个字符串，将它们用作实参来调用这两个函数，如果返回NULL输出-1，否则输出子字符串出现时头字符在原字符串的下标，每个结果占一行。</p><p>要求实现程序中不可使用“string.h”头文件内有关寻找子串的标准库函数。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入源串sourceStr，子字符串subStr。</p><p><strong><font size=4>【输出形式】</font></strong></p><p>子字符串subStr最后一次在源串sourceStr中出现的位置</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>welcometochinauniversityofminingandtechnologyin</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>29</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;p[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span>*p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>,max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">    num++;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27; &#x27;</span>||p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;num)</span><br><span class="line">&#123;</span><br><span class="line">max=num;</span><br><span class="line">    &#125;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">char</span>*p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,num=<span class="number">0</span>,max=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">    num++;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27; &#x27;</span>||p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;num)</span><br><span class="line">&#123;</span><br><span class="line">max=num;</span><br><span class="line">t=i-max;</span><br><span class="line">    &#125;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[i]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=t+<span class="number">1</span>;p[i]!=<span class="string">&#x27; &#x27;</span>;i++)</span><br><span class="line">cout&lt;&lt;p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">500</span>],*p=str;</span><br><span class="line">cin.<span class="built_in">getline</span>(str,<span class="number">500</span>);</span><br><span class="line">cout&lt;&lt;<span class="built_in">count</span>(p);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fun</span>(p);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">output</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】第二章 程序与控制</title>
      <link href="/2020/01/09/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2020/01/09/%E5%AE%9E%E9%AA%8C%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="实践题1"><a href="#实践题1" class="headerlink" title="实践题1"></a>实践题1</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>利用循环结构，编制程序显示出如下“图形”。<br>1<br>131<br>13531<br>1357531<br>135797531<br>　　　　<br><strong><font size=4>【输入形式】</font></strong></p><p>打印图形的行数</p><p><strong><font size=4>【输出形式】</font></strong></p><p>打印图形<br><strong><font size=4>【样例输入】</font></strong></p><pre><code>  3</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>113113531</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,m,n,j;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">cout&lt;&lt;<span class="number">2</span>*j<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(m=i<span class="number">-1</span>;m&gt;=<span class="number">1</span>;m--)</span><br><span class="line">cout&lt;&lt;<span class="number">2</span>*m<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题2"><a href="#实践题2" class="headerlink" title="实践题2"></a>实践题2</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　某商店出售四种商品: A商品每公斤2.75元；B商品每个12.5 元；C商品每米26.8 元；D商品每台512元，超过3台优惠10%，超过8台优惠15%。设计一个计算价格的程序，通过输入购买四种商品的数量，计算并显示每种商品应付金额以及总金额。 </p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入每种商品的数量。</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出每种商品的应付金额和总金额。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>1 2 3 2</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>A:2.75B:25C:80.4D:1024total:1132.15</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">double</span> a,b,c,d,pd;</span><br><span class="line">   cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">   <span class="keyword">if</span>(d&gt;<span class="number">8</span>)</span><br><span class="line">   &#123; </span><br><span class="line">    pd=d*<span class="number">512</span>*<span class="number">0.85</span>;</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(d&gt;<span class="number">3</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    pd=d*<span class="number">512</span>*<span class="number">0.9</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">    pd=d*<span class="number">512</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;A:&quot;</span>&lt;&lt;<span class="number">2.75</span>*a&lt;&lt;endl&lt;&lt;<span class="string">&quot;B:&quot;</span>&lt;&lt;<span class="number">12.5</span>*b&lt;&lt;endl&lt;&lt;<span class="string">&quot;C:&quot;</span>&lt;&lt;<span class="number">26.8</span>*c&lt;&lt;endl&lt;&lt;<span class="string">&quot;D:&quot;</span>&lt;&lt;pd&lt;&lt;endl&lt;&lt;<span class="string">&quot;total:&quot;</span>&lt;&lt;<span class="number">2.75</span>*a+<span class="number">12.5</span>*b+<span class="number">26.8</span>*c+pd;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="实践题3"><a href="#实践题3" class="headerlink" title="实践题3"></a>实践题3</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　求n以内被3除余1且个位数为6的所有整数（如16、46、…、286等）并显示在屏幕上。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入某个数</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出所有结果，空格隔开</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>300</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>16 46 76 106 136 166 196 226 256 286</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>&amp;&amp;i%<span class="number">10</span>==<span class="number">6</span>)</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题4"><a href="#实践题4" class="headerlink" title="实践题4"></a>实践题4</h2><p><strong><font size=4>【问题描述】</font></strong></p><p>　　编写一程序统计参赛选手的得分，计分标准为去掉一个最高分和一个最低分后，对剩余得分求平均值。要求首先从键盘输入评委的个数num，然后输入num个分数（分数为小于等于10的一个正实数），输出最终得分。</p><p><strong><font size=4>【输入形式】</font></strong></p><p>输入评委个数和各自分数。</p><p><strong><font size=4>【输出形式】</font></strong></p><p>输出得分。</p><p><strong><font size=4>【样例输入】</font></strong></p><pre><code>59.2 9.6 9.5 9.7 9.7</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>9.6</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num,i;</span><br><span class="line"><span class="keyword">double</span> max,min,sum,avg;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line"><span class="keyword">double</span> score[num];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;score[i];</span><br><span class="line"> &#125; </span><br><span class="line"> min=score[<span class="number">0</span>];</span><br><span class="line"> max=score[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;num;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(score[i]&lt;min)</span><br><span class="line"> min=score[i];</span><br><span class="line"> <span class="keyword">if</span>(score[i]&gt;max)</span><br><span class="line"> max=score[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>,sum=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> sum+=score[i];</span><br><span class="line"> &#125;</span><br><span class="line"> avg=(sum-min-max)/(num<span class="number">-2</span>);</span><br><span class="line"> cout&lt;&lt;avg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实践题5"><a href="#实践题5" class="headerlink" title="实践题5"></a>实践题5</h2><p> <strong><font size=4>【问题描述】</font></strong></p><p>设计一个程序，对于用户输入的任意正整数a（a≥1）和b（b≥2），求出满足bn≤a的最大整数n。</p><p> <strong><font size=4>【输入形式】</font></strong></p><p>两个数。</p><p> <strong><font size=4>【输出形式】</font></strong></p><p>一个数据。</p><p> <strong><font size=4>【样例输入】</font></strong></p><pre><code>30 5</code></pre><p><strong><font size=4>【样例输出】</font></strong></p><pre><code>2</code></pre><p><strong><font size=4>【题解】</font></strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,a,b,result;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>,result=<span class="number">1</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">result*=b;</span><br><span class="line"><span class="keyword">if</span>(result&gt;a)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
